// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projet_tp_sid.job_acte_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.HealthServiceUtils;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: job_acte Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class job_acte implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "job_acte";
	private final String projectName = "PROJET_TP_SID";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					job_acte.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(job_acte.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_job_acte = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_job_acte = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Acte;

		public String getActe() {
			return this.Acte;
		}

		public String designation_acte;

		public String getDesignation_acte() {
			return this.designation_acte;
		}

		public String categ_acte;

		public String getCateg_acte() {
			return this.categ_acte;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Acte == null) ? 0 : this.Acte.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.Acte == null) {
				if (other.Acte != null)
					return false;

			} else if (!this.Acte.equals(other.Acte))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.Acte = this.Acte;
			other.designation_acte = this.designation_acte;
			other.categ_acte = this.categ_acte;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.Acte = this.Acte;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_job_acte.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_job_acte.length == 0) {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_job_acte, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_job_acte, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_job_acte.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_job_acte.length == 0) {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_job_acte, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_job_acte, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_job_acte) {

				try {

					int length = 0;

					this.Acte = readString(dis);

					this.designation_acte = readString(dis);

					this.categ_acte = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_job_acte) {

				try {

					int length = 0;

					this.Acte = readString(dis);

					this.designation_acte = readString(dis);

					this.categ_acte = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Acte, dos);

				// String

				writeString(this.designation_acte, dos);

				// String

				writeString(this.categ_acte, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Acte, dos);

				// String

				writeString(this.designation_acte, dos);

				// String

				writeString(this.categ_acte, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Acte=" + Acte);
			sb.append(",designation_acte=" + designation_acte);
			sb.append(",categ_acte=" + categ_acte);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Acte, other.Acte);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class acte_dimStruct implements routines.system.IPersistableRow<acte_dimStruct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_job_acte = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_job_acte = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Acte;

		public String getActe() {
			return this.Acte;
		}

		public String designation_acte;

		public String getDesignation_acte() {
			return this.designation_acte;
		}

		public String categ_acte;

		public String getCateg_acte() {
			return this.categ_acte;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Acte == null) ? 0 : this.Acte.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final acte_dimStruct other = (acte_dimStruct) obj;

			if (this.Acte == null) {
				if (other.Acte != null)
					return false;

			} else if (!this.Acte.equals(other.Acte))

				return false;

			return true;
		}

		public void copyDataTo(acte_dimStruct other) {

			other.Acte = this.Acte;
			other.designation_acte = this.designation_acte;
			other.categ_acte = this.categ_acte;

		}

		public void copyKeysDataTo(acte_dimStruct other) {

			other.Acte = this.Acte;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_job_acte.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_job_acte.length == 0) {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_job_acte, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_job_acte, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_job_acte.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_job_acte.length == 0) {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_job_acte, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_job_acte, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_job_acte) {

				try {

					int length = 0;

					this.Acte = readString(dis);

					this.designation_acte = readString(dis);

					this.categ_acte = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_job_acte) {

				try {

					int length = 0;

					this.Acte = readString(dis);

					this.designation_acte = readString(dis);

					this.categ_acte = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Acte, dos);

				// String

				writeString(this.designation_acte, dos);

				// String

				writeString(this.categ_acte, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Acte, dos);

				// String

				writeString(this.designation_acte, dos);

				// String

				writeString(this.categ_acte, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Acte=" + Acte);
			sb.append(",designation_acte=" + designation_acte);
			sb.append(",categ_acte=" + categ_acte);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(acte_dimStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Acte, other.Acte);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_job_acte = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_job_acte = new byte[0];

		public Integer NUM_SINISTRE;

		public Integer getNUM_SINISTRE() {
			return this.NUM_SINISTRE;
		}

		public Integer NUM_ADHESION;

		public Integer getNUM_ADHESION() {
			return this.NUM_ADHESION;
		}

		public String ACTE;

		public String getACTE() {
			return this.ACTE;
		}

		public String DESIGNATION_ACTE;

		public String getDESIGNATION_ACTE() {
			return this.DESIGNATION_ACTE;
		}

		public String LIBELLE_BAREME;

		public String getLIBELLE_BAREME() {
			return this.LIBELLE_BAREME;
		}

		public Integer NUM_BENEFICIAIRE;

		public Integer getNUM_BENEFICIAIRE() {
			return this.NUM_BENEFICIAIRE;
		}

		public Integer NUM_BENEFICIAIRE_SINISTRE;

		public Integer getNUM_BENEFICIAIRE_SINISTRE() {
			return this.NUM_BENEFICIAIRE_SINISTRE;
		}

		public Integer JOUR_DEBUT_SOINS;

		public Integer getJOUR_DEBUT_SOINS() {
			return this.JOUR_DEBUT_SOINS;
		}

		public Integer MOIS_DEBUT_SOINS;

		public Integer getMOIS_DEBUT_SOINS() {
			return this.MOIS_DEBUT_SOINS;
		}

		public Integer ANNEE_DEBUT_SOINS;

		public Integer getANNEE_DEBUT_SOINS() {
			return this.ANNEE_DEBUT_SOINS;
		}

		public Integer JOUR_PAIEMENT;

		public Integer getJOUR_PAIEMENT() {
			return this.JOUR_PAIEMENT;
		}

		public Integer MOIS_PAIEMENT;

		public Integer getMOIS_PAIEMENT() {
			return this.MOIS_PAIEMENT;
		}

		public Integer ANNEE_PAIEMENT;

		public Integer getANNEE_PAIEMENT() {
			return this.ANNEE_PAIEMENT;
		}

		public Float FRAIS_REEL_ASSURE;

		public Float getFRAIS_REEL_ASSURE() {
			return this.FRAIS_REEL_ASSURE;
		}

		public Float MONTANT_SECU;

		public Float getMONTANT_SECU() {
			return this.MONTANT_SECU;
		}

		public Float MONTANT_REMBOURSE;

		public Float getMONTANT_REMBOURSE() {
			return this.MONTANT_REMBOURSE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_job_acte.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_job_acte.length == 0) {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_job_acte, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_job_acte, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_job_acte.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_job_acte.length == 0) {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_job_acte, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_job_acte, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_job_acte) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_job_acte) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_SINISTRE=" + String.valueOf(NUM_SINISTRE));
			sb.append(",NUM_ADHESION=" + String.valueOf(NUM_ADHESION));
			sb.append(",ACTE=" + ACTE);
			sb.append(",DESIGNATION_ACTE=" + DESIGNATION_ACTE);
			sb.append(",LIBELLE_BAREME=" + LIBELLE_BAREME);
			sb.append(",NUM_BENEFICIAIRE=" + String.valueOf(NUM_BENEFICIAIRE));
			sb.append(",NUM_BENEFICIAIRE_SINISTRE=" + String.valueOf(NUM_BENEFICIAIRE_SINISTRE));
			sb.append(",JOUR_DEBUT_SOINS=" + String.valueOf(JOUR_DEBUT_SOINS));
			sb.append(",MOIS_DEBUT_SOINS=" + String.valueOf(MOIS_DEBUT_SOINS));
			sb.append(",ANNEE_DEBUT_SOINS=" + String.valueOf(ANNEE_DEBUT_SOINS));
			sb.append(",JOUR_PAIEMENT=" + String.valueOf(JOUR_PAIEMENT));
			sb.append(",MOIS_PAIEMENT=" + String.valueOf(MOIS_PAIEMENT));
			sb.append(",ANNEE_PAIEMENT=" + String.valueOf(ANNEE_PAIEMENT));
			sb.append(",FRAIS_REEL_ASSURE=" + String.valueOf(FRAIS_REEL_ASSURE));
			sb.append(",MONTANT_SECU=" + String.valueOf(MONTANT_SECU));
			sb.append(",MONTANT_REMBOURSE=" + String.valueOf(MONTANT_REMBOURSE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_job_acte = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_job_acte = new byte[0];

		public Integer NUM_SINISTRE;

		public Integer getNUM_SINISTRE() {
			return this.NUM_SINISTRE;
		}

		public Integer NUM_ADHESION;

		public Integer getNUM_ADHESION() {
			return this.NUM_ADHESION;
		}

		public String ACTE;

		public String getACTE() {
			return this.ACTE;
		}

		public String DESIGNATION_ACTE;

		public String getDESIGNATION_ACTE() {
			return this.DESIGNATION_ACTE;
		}

		public String LIBELLE_BAREME;

		public String getLIBELLE_BAREME() {
			return this.LIBELLE_BAREME;
		}

		public Integer NUM_BENEFICIAIRE;

		public Integer getNUM_BENEFICIAIRE() {
			return this.NUM_BENEFICIAIRE;
		}

		public Integer NUM_BENEFICIAIRE_SINISTRE;

		public Integer getNUM_BENEFICIAIRE_SINISTRE() {
			return this.NUM_BENEFICIAIRE_SINISTRE;
		}

		public Integer JOUR_DEBUT_SOINS;

		public Integer getJOUR_DEBUT_SOINS() {
			return this.JOUR_DEBUT_SOINS;
		}

		public Integer MOIS_DEBUT_SOINS;

		public Integer getMOIS_DEBUT_SOINS() {
			return this.MOIS_DEBUT_SOINS;
		}

		public Integer ANNEE_DEBUT_SOINS;

		public Integer getANNEE_DEBUT_SOINS() {
			return this.ANNEE_DEBUT_SOINS;
		}

		public Integer JOUR_PAIEMENT;

		public Integer getJOUR_PAIEMENT() {
			return this.JOUR_PAIEMENT;
		}

		public Integer MOIS_PAIEMENT;

		public Integer getMOIS_PAIEMENT() {
			return this.MOIS_PAIEMENT;
		}

		public Integer ANNEE_PAIEMENT;

		public Integer getANNEE_PAIEMENT() {
			return this.ANNEE_PAIEMENT;
		}

		public Float FRAIS_REEL_ASSURE;

		public Float getFRAIS_REEL_ASSURE() {
			return this.FRAIS_REEL_ASSURE;
		}

		public Float MONTANT_SECU;

		public Float getMONTANT_SECU() {
			return this.MONTANT_SECU;
		}

		public Float MONTANT_REMBOURSE;

		public Float getMONTANT_REMBOURSE() {
			return this.MONTANT_REMBOURSE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_job_acte.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_job_acte.length == 0) {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_job_acte, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_job_acte, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_job_acte.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_job_acte.length == 0) {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_job_acte = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_job_acte, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_job_acte, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_job_acte) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_job_acte) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_SINISTRE=" + String.valueOf(NUM_SINISTRE));
			sb.append(",NUM_ADHESION=" + String.valueOf(NUM_ADHESION));
			sb.append(",ACTE=" + ACTE);
			sb.append(",DESIGNATION_ACTE=" + DESIGNATION_ACTE);
			sb.append(",LIBELLE_BAREME=" + LIBELLE_BAREME);
			sb.append(",NUM_BENEFICIAIRE=" + String.valueOf(NUM_BENEFICIAIRE));
			sb.append(",NUM_BENEFICIAIRE_SINISTRE=" + String.valueOf(NUM_BENEFICIAIRE_SINISTRE));
			sb.append(",JOUR_DEBUT_SOINS=" + String.valueOf(JOUR_DEBUT_SOINS));
			sb.append(",MOIS_DEBUT_SOINS=" + String.valueOf(MOIS_DEBUT_SOINS));
			sb.append(",ANNEE_DEBUT_SOINS=" + String.valueOf(ANNEE_DEBUT_SOINS));
			sb.append(",JOUR_PAIEMENT=" + String.valueOf(JOUR_PAIEMENT));
			sb.append(",MOIS_PAIEMENT=" + String.valueOf(MOIS_PAIEMENT));
			sb.append(",ANNEE_PAIEMENT=" + String.valueOf(ANNEE_PAIEMENT));
			sb.append(",FRAIS_REEL_ASSURE=" + String.valueOf(FRAIS_REEL_ASSURE));
			sb.append(",MONTANT_SECU=" + String.valueOf(MONTANT_SECU));
			sb.append(",MONTANT_REMBOURSE=" + String.valueOf(MONTANT_REMBOURSE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				acte_dimStruct acte_dim = new acte_dimStruct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "acte_dim");
				}

				int tos_count_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 3 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "acte_dim";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;

				String properties_tDBOutput_1 = "useSSL=True & serverTimezone=Europe/Paris";
				if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
					properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3308" + "/" + "bi" + "?"
						+ properties_tDBOutput_1;

				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:9VgrWkaA7VDBWB4JW4pjs2Q1v1zxh1OaBNc9vg==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "acte_dim" + "` WHERE `Acte` = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO `" + "acte_dim"
						+ "` (`Acte`,`designation_acte`,`categ_acte`) VALUES (?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE `" + "acte_dim"
						+ "` SET `designation_acte` = ?,`categ_acte` = ? WHERE `Acte` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				acte_dimStruct acte_dim_tmp = new acte_dimStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ACTE;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ACTE == null) ? 0 : this.ACTE.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.ACTE == null) {
							if (other.ACTE != null)
								return false;

						} else if (!this.ACTE.equals(other.ACTE))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Prestations_sante.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Prestations_sante.csv", "US-ASCII",
								";", "\n", false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.NUM_SINISTRE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_SINISTRE", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.NUM_SINISTRE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.NUM_ADHESION = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_ADHESION", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.NUM_ADHESION = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.ACTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.DESIGNATION_ACTE = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.LIBELLE_BAREME = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.NUM_BENEFICIAIRE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_BENEFICIAIRE", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.NUM_BENEFICIAIRE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 6;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.NUM_BENEFICIAIRE_SINISTRE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_BENEFICIAIRE_SINISTRE", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.NUM_BENEFICIAIRE_SINISTRE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.JOUR_DEBUT_SOINS = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"JOUR_DEBUT_SOINS", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.JOUR_DEBUT_SOINS = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.MOIS_DEBUT_SOINS = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MOIS_DEBUT_SOINS", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.MOIS_DEBUT_SOINS = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.ANNEE_DEBUT_SOINS = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ANNEE_DEBUT_SOINS", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.ANNEE_DEBUT_SOINS = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.JOUR_PAIEMENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"JOUR_PAIEMENT", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.JOUR_PAIEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.MOIS_PAIEMENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MOIS_PAIEMENT", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.MOIS_PAIEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.ANNEE_PAIEMENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ANNEE_PAIEMENT", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.ANNEE_PAIEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 13;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.FRAIS_REEL_ASSURE = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"FRAIS_REEL_ASSURE", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.FRAIS_REEL_ASSURE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 14;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.MONTANT_SECU = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MONTANT_SECU", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.MONTANT_SECU = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 15;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.MONTANT_REMBOURSE = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MONTANT_REMBOURSE", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.MONTANT_REMBOURSE = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							row2 = null;
							if (row1.ACTE == null) {
								finder_tUniqRow_1.ACTE = null;
							} else {
								finder_tUniqRow_1.ACTE = row1.ACTE.toLowerCase();
							}
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								if (row1.ACTE == null) {
									new_tUniqRow_1.ACTE = null;
								} else {
									new_tUniqRow_1.ACTE = row1.ACTE.toLowerCase();
								}

								keystUniqRow_1.add(new_tUniqRow_1);
								if (row2 == null) {

									row2 = new row2Struct();
								}
								row2.NUM_SINISTRE = row1.NUM_SINISTRE;
								row2.NUM_ADHESION = row1.NUM_ADHESION;
								row2.ACTE = row1.ACTE;
								row2.DESIGNATION_ACTE = row1.DESIGNATION_ACTE;
								row2.LIBELLE_BAREME = row1.LIBELLE_BAREME;
								row2.NUM_BENEFICIAIRE = row1.NUM_BENEFICIAIRE;
								row2.NUM_BENEFICIAIRE_SINISTRE = row1.NUM_BENEFICIAIRE_SINISTRE;
								row2.JOUR_DEBUT_SOINS = row1.JOUR_DEBUT_SOINS;
								row2.MOIS_DEBUT_SOINS = row1.MOIS_DEBUT_SOINS;
								row2.ANNEE_DEBUT_SOINS = row1.ANNEE_DEBUT_SOINS;
								row2.JOUR_PAIEMENT = row1.JOUR_PAIEMENT;
								row2.MOIS_PAIEMENT = row1.MOIS_PAIEMENT;
								row2.ANNEE_PAIEMENT = row1.ANNEE_PAIEMENT;
								row2.FRAIS_REEL_ASSURE = row1.FRAIS_REEL_ASSURE;
								row2.MONTANT_SECU = row1.MONTANT_SECU;
								row2.MONTANT_REMBOURSE = row1.MONTANT_REMBOURSE;
								nb_uniques_tUniqRow_1++;
							} else {
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */

							/**
							 * [tUniqRow_1 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row2"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									acte_dim = null;

// # Output table : 'acte_dim'
									acte_dim_tmp.Acte = row2.ACTE;
									acte_dim_tmp.designation_acte = row2.DESIGNATION_ACTE;
									acte_dim_tmp.categ_acte = routines.HealthServiceUtils
											.getServiceCategory(row2.DESIGNATION_ACTE);
									acte_dim = acte_dim_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "acte_dim"
								if (acte_dim != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "acte_dim"

										);
									}

									row3 = null;
									whetherReject_tDBOutput_1 = false;
									if (acte_dim.Acte == null) {
										pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(1, acte_dim.Acte);
									}

									int checkCount_tDBOutput_1 = -1;
									try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
										while (rs_tDBOutput_1.next()) {
											checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
										}
									}
									if (checkCount_tDBOutput_1 > 0) {
										if (acte_dim.designation_acte == null) {
											pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(1, acte_dim.designation_acte);
										}

										if (acte_dim.categ_acte == null) {
											pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(2, acte_dim.categ_acte);
										}

										if (acte_dim.Acte == null) {
											pstmtUpdate_tDBOutput_1.setNull(3 + count_tDBOutput_1,
													java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(3 + count_tDBOutput_1, acte_dim.Acte);
										}

										try {
											int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
											updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
											rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
											nb_line_tDBOutput_1++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_1 = true;
											nb_line_tDBOutput_1++;
											System.err.print(e.getMessage());
										}
									} else {
										if (acte_dim.Acte == null) {
											pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(1, acte_dim.Acte);
										}

										if (acte_dim.designation_acte == null) {
											pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(2, acte_dim.designation_acte);
										}

										if (acte_dim.categ_acte == null) {
											pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(3, acte_dim.categ_acte);
										}

										try {
											int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
											insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
											rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
											nb_line_tDBOutput_1++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_1 = true;
											nb_line_tDBOutput_1++;
											System.err.print(e.getMessage());
										}
									}
									if (!whetherReject_tDBOutput_1) {
										row3 = new row3Struct();
										row3.Acte = acte_dim.Acte;
										row3.designation_acte = acte_dim.designation_acte;
										row3.categ_acte = acte_dim.categ_acte;
									}
									commitCounter_tDBOutput_1++;

									if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

										if (rowsToCommitCount_tDBOutput_1 != 0) {
										}
										conn_tDBOutput_1.commit();
										if (rowsToCommitCount_tDBOutput_1 != 0) {
											rowsToCommitCount_tDBOutput_1 = 0;
										}
										commitCounter_tDBOutput_1 = 0;

									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */
// Start of branch "row3"
									if (row3 != null) {

										/**
										 * [tLogRow_1 main ] start
										 */

										currentComponent = "tLogRow_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row3"

											);
										}

///////////////////////		

										strBuffer_tLogRow_1 = new StringBuilder();

										if (row3.Acte != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row3.Acte));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row3.designation_acte != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row3.designation_acte));

										} //

										strBuffer_tLogRow_1.append("|");

										if (row3.categ_acte != null) { //

											strBuffer_tLogRow_1.append(String.valueOf(row3.categ_acte));

										} //

										if (globalMap.get("tLogRow_CONSOLE") != null) {
											consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
													.get("tLogRow_CONSOLE");
										} else {
											consoleOut_tLogRow_1 = new java.io.PrintStream(
													new java.io.BufferedOutputStream(System.out));
											globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
										}
										consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
										consoleOut_tLogRow_1.flush();
										nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

										tos_count_tLogRow_1++;

										/**
										 * [tLogRow_1 main ] stop
										 */

										/**
										 * [tLogRow_1 process_data_begin ] start
										 */

										currentComponent = "tLogRow_1";

										/**
										 * [tLogRow_1 process_data_begin ] stop
										 */

										/**
										 * [tLogRow_1 process_data_end ] start
										 */

										currentComponent = "tLogRow_1";

										/**
										 * [tLogRow_1 process_data_end ] stop
										 */

									} // End of branch "row3"

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "acte_dim"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tUniqRow_1 process_data_end ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Prestations_sante.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "acte_dim");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final job_acte job_acteClass = new job_acte();

		int exitCode = job_acteClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = job_acte.class.getClassLoader()
					.getResourceAsStream("projet_tp_sid/job_acte_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = job_acte.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : job_acte");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 110390 characters generated by Talend Open Studio for Data Integration on the
 * March 9, 2025 at 2:54:31 PM CET
 ************************************************************************************************/