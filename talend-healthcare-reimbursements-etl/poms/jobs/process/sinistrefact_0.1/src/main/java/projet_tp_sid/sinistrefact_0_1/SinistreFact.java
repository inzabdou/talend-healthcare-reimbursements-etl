// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package projet_tp_sid.sinistrefact_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: SinistreFact Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class SinistreFact implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "SinistreFact";
	private final String projectName = "PROJET_TP_SID";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					SinistreFact.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(SinistreFact.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer NUM_ADHESION_NORMALISE;

		public Integer getNUM_ADHESION_NORMALISE() {
			return this.NUM_ADHESION_NORMALISE;
		}

		public Integer NUM_BENEFICIAIRE_UNIQUE;

		public Integer getNUM_BENEFICIAIRE_UNIQUE() {
			return this.NUM_BENEFICIAIRE_UNIQUE;
		}

		public String DATE_NAISSANCE_ASSURE;

		public String getDATE_NAISSANCE_ASSURE() {
			return this.DATE_NAISSANCE_ASSURE;
		}

		public Integer CODE_POSTAL;

		public Integer getCODE_POSTAL() {
			return this.CODE_POSTAL;
		}

		public Integer EXERCICE_PAIEMENT;

		public Integer getEXERCICE_PAIEMENT() {
			return this.EXERCICE_PAIEMENT;
		}

		public Integer NUM_BENEFICIAIRE;

		public Integer getNUM_BENEFICIAIRE() {
			return this.NUM_BENEFICIAIRE;
		}

		public String TYPE_BENEFICIAIRE;

		public String getTYPE_BENEFICIAIRE() {
			return this.TYPE_BENEFICIAIRE;
		}

		public String DATE_NAISSANCE_BENEFICIAIRE;

		public String getDATE_NAISSANCE_BENEFICIAIRE() {
			return this.DATE_NAISSANCE_BENEFICIAIRE;
		}

		public String CODE_PROFESSION;

		public String getCODE_PROFESSION() {
			return this.CODE_PROFESSION;
		}

		public Character CODE_PRODUIT;

		public Character getCODE_PRODUIT() {
			return this.CODE_PRODUIT;
		}

		public Character CODE_FRACTIONNEMENT;

		public Character getCODE_FRACTIONNEMENT() {
			return this.CODE_FRACTIONNEMENT;
		}

		public String CODE_GARANTIE;

		public String getCODE_GARANTIE() {
			return this.CODE_GARANTIE;
		}

		public String FORMULE;

		public String getFORMULE() {
			return this.FORMULE;
		}

		public Float PRIMES_ACQUISES;

		public Float getPRIMES_ACQUISES() {
			return this.PRIMES_ACQUISES;
		}

		public Integer CODE_AGENT;

		public Integer getCODE_AGENT() {
			return this.CODE_AGENT;
		}

		public Integer CODE_REGION;

		public Integer getCODE_REGION() {
			return this.CODE_REGION;
		}

		public String PRIME_GARANTIE;

		public String getPRIME_GARANTIE() {
			return this.PRIME_GARANTIE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.NUM_ADHESION_NORMALISE == null) ? 0 : this.NUM_ADHESION_NORMALISE.hashCode());

				result = prime * result
						+ ((this.NUM_BENEFICIAIRE_UNIQUE == null) ? 0 : this.NUM_BENEFICIAIRE_UNIQUE.hashCode());

				result = prime * result + ((this.EXERCICE_PAIEMENT == null) ? 0 : this.EXERCICE_PAIEMENT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.NUM_ADHESION_NORMALISE == null) {
				if (other.NUM_ADHESION_NORMALISE != null)
					return false;

			} else if (!this.NUM_ADHESION_NORMALISE.equals(other.NUM_ADHESION_NORMALISE))

				return false;

			if (this.NUM_BENEFICIAIRE_UNIQUE == null) {
				if (other.NUM_BENEFICIAIRE_UNIQUE != null)
					return false;

			} else if (!this.NUM_BENEFICIAIRE_UNIQUE.equals(other.NUM_BENEFICIAIRE_UNIQUE))

				return false;

			if (this.EXERCICE_PAIEMENT == null) {
				if (other.EXERCICE_PAIEMENT != null)
					return false;

			} else if (!this.EXERCICE_PAIEMENT.equals(other.EXERCICE_PAIEMENT))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.NUM_ADHESION_NORMALISE = this.NUM_ADHESION_NORMALISE;
			other.NUM_BENEFICIAIRE_UNIQUE = this.NUM_BENEFICIAIRE_UNIQUE;
			other.DATE_NAISSANCE_ASSURE = this.DATE_NAISSANCE_ASSURE;
			other.CODE_POSTAL = this.CODE_POSTAL;
			other.EXERCICE_PAIEMENT = this.EXERCICE_PAIEMENT;
			other.NUM_BENEFICIAIRE = this.NUM_BENEFICIAIRE;
			other.TYPE_BENEFICIAIRE = this.TYPE_BENEFICIAIRE;
			other.DATE_NAISSANCE_BENEFICIAIRE = this.DATE_NAISSANCE_BENEFICIAIRE;
			other.CODE_PROFESSION = this.CODE_PROFESSION;
			other.CODE_PRODUIT = this.CODE_PRODUIT;
			other.CODE_FRACTIONNEMENT = this.CODE_FRACTIONNEMENT;
			other.CODE_GARANTIE = this.CODE_GARANTIE;
			other.FORMULE = this.FORMULE;
			other.PRIMES_ACQUISES = this.PRIMES_ACQUISES;
			other.CODE_AGENT = this.CODE_AGENT;
			other.CODE_REGION = this.CODE_REGION;
			other.PRIME_GARANTIE = this.PRIME_GARANTIE;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.NUM_ADHESION_NORMALISE = this.NUM_ADHESION_NORMALISE;
			other.NUM_BENEFICIAIRE_UNIQUE = this.NUM_BENEFICIAIRE_UNIQUE;
			other.EXERCICE_PAIEMENT = this.EXERCICE_PAIEMENT;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_ADHESION_NORMALISE = readInteger(dis);

					this.NUM_BENEFICIAIRE_UNIQUE = readInteger(dis);

					this.EXERCICE_PAIEMENT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_ADHESION_NORMALISE = readInteger(dis);

					this.NUM_BENEFICIAIRE_UNIQUE = readInteger(dis);

					this.EXERCICE_PAIEMENT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_ADHESION_NORMALISE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_UNIQUE, dos);

				// Integer

				writeInteger(this.EXERCICE_PAIEMENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_ADHESION_NORMALISE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_UNIQUE, dos);

				// Integer

				writeInteger(this.EXERCICE_PAIEMENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DATE_NAISSANCE_ASSURE = readString(dis, ois);

				this.CODE_POSTAL = readInteger(dis, ois);

				this.NUM_BENEFICIAIRE = readInteger(dis, ois);

				this.TYPE_BENEFICIAIRE = readString(dis, ois);

				this.DATE_NAISSANCE_BENEFICIAIRE = readString(dis, ois);

				this.CODE_PROFESSION = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.CODE_PRODUIT = null;
				} else {
					this.CODE_PRODUIT = dis.readChar();
				}

				length = dis.readByte();
				if (length == -1) {
					this.CODE_FRACTIONNEMENT = null;
				} else {
					this.CODE_FRACTIONNEMENT = dis.readChar();
				}

				this.CODE_GARANTIE = readString(dis, ois);

				this.FORMULE = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.PRIMES_ACQUISES = null;
				} else {
					this.PRIMES_ACQUISES = dis.readFloat();
				}

				this.CODE_AGENT = readInteger(dis, ois);

				this.CODE_REGION = readInteger(dis, ois);

				this.PRIME_GARANTIE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.DATE_NAISSANCE_ASSURE = readString(dis, objectIn);

				this.CODE_POSTAL = readInteger(dis, objectIn);

				this.NUM_BENEFICIAIRE = readInteger(dis, objectIn);

				this.TYPE_BENEFICIAIRE = readString(dis, objectIn);

				this.DATE_NAISSANCE_BENEFICIAIRE = readString(dis, objectIn);

				this.CODE_PROFESSION = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.CODE_PRODUIT = null;
				} else {
					this.CODE_PRODUIT = objectIn.readChar();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.CODE_FRACTIONNEMENT = null;
				} else {
					this.CODE_FRACTIONNEMENT = objectIn.readChar();
				}

				this.CODE_GARANTIE = readString(dis, objectIn);

				this.FORMULE = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.PRIMES_ACQUISES = null;
				} else {
					this.PRIMES_ACQUISES = objectIn.readFloat();
				}

				this.CODE_AGENT = readInteger(dis, objectIn);

				this.CODE_REGION = readInteger(dis, objectIn);

				this.PRIME_GARANTIE = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.DATE_NAISSANCE_ASSURE, dos, oos);

				writeInteger(this.CODE_POSTAL, dos, oos);

				writeInteger(this.NUM_BENEFICIAIRE, dos, oos);

				writeString(this.TYPE_BENEFICIAIRE, dos, oos);

				writeString(this.DATE_NAISSANCE_BENEFICIAIRE, dos, oos);

				writeString(this.CODE_PROFESSION, dos, oos);

				if (this.CODE_PRODUIT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.CODE_PRODUIT);
				}

				if (this.CODE_FRACTIONNEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.CODE_FRACTIONNEMENT);
				}

				writeString(this.CODE_GARANTIE, dos, oos);

				writeString(this.FORMULE, dos, oos);

				if (this.PRIMES_ACQUISES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRIMES_ACQUISES);
				}

				writeInteger(this.CODE_AGENT, dos, oos);

				writeInteger(this.CODE_REGION, dos, oos);

				writeString(this.PRIME_GARANTIE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.DATE_NAISSANCE_ASSURE, dos, objectOut);

				writeInteger(this.CODE_POSTAL, dos, objectOut);

				writeInteger(this.NUM_BENEFICIAIRE, dos, objectOut);

				writeString(this.TYPE_BENEFICIAIRE, dos, objectOut);

				writeString(this.DATE_NAISSANCE_BENEFICIAIRE, dos, objectOut);

				writeString(this.CODE_PROFESSION, dos, objectOut);

				if (this.CODE_PRODUIT == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.CODE_PRODUIT);
				}

				if (this.CODE_FRACTIONNEMENT == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.CODE_FRACTIONNEMENT);
				}

				writeString(this.CODE_GARANTIE, dos, objectOut);

				writeString(this.FORMULE, dos, objectOut);

				if (this.PRIMES_ACQUISES == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeFloat(this.PRIMES_ACQUISES);
				}

				writeInteger(this.CODE_AGENT, dos, objectOut);

				writeInteger(this.CODE_REGION, dos, objectOut);

				writeString(this.PRIME_GARANTIE, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_ADHESION_NORMALISE=" + String.valueOf(NUM_ADHESION_NORMALISE));
			sb.append(",NUM_BENEFICIAIRE_UNIQUE=" + String.valueOf(NUM_BENEFICIAIRE_UNIQUE));
			sb.append(",DATE_NAISSANCE_ASSURE=" + DATE_NAISSANCE_ASSURE);
			sb.append(",CODE_POSTAL=" + String.valueOf(CODE_POSTAL));
			sb.append(",EXERCICE_PAIEMENT=" + String.valueOf(EXERCICE_PAIEMENT));
			sb.append(",NUM_BENEFICIAIRE=" + String.valueOf(NUM_BENEFICIAIRE));
			sb.append(",TYPE_BENEFICIAIRE=" + TYPE_BENEFICIAIRE);
			sb.append(",DATE_NAISSANCE_BENEFICIAIRE=" + DATE_NAISSANCE_BENEFICIAIRE);
			sb.append(",CODE_PROFESSION=" + CODE_PROFESSION);
			sb.append(",CODE_PRODUIT=" + String.valueOf(CODE_PRODUIT));
			sb.append(",CODE_FRACTIONNEMENT=" + String.valueOf(CODE_FRACTIONNEMENT));
			sb.append(",CODE_GARANTIE=" + CODE_GARANTIE);
			sb.append(",FORMULE=" + FORMULE);
			sb.append(",PRIMES_ACQUISES=" + String.valueOf(PRIMES_ACQUISES));
			sb.append(",CODE_AGENT=" + String.valueOf(CODE_AGENT));
			sb.append(",CODE_REGION=" + String.valueOf(CODE_REGION));
			sb.append(",PRIME_GARANTIE=" + PRIME_GARANTIE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NUM_ADHESION_NORMALISE, other.NUM_ADHESION_NORMALISE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.NUM_BENEFICIAIRE_UNIQUE, other.NUM_BENEFICIAIRE_UNIQUE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.EXERCICE_PAIEMENT, other.EXERCICE_PAIEMENT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tFileInputDelimited_1 - inputs:(after_tFileInputDelimited_2)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3)
				// outputs:()
				// linked node: tMap_1 - inputs:(row3,row2,row6,row8)
				// outputs:(sinistre,sortieTMap)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Adhesion_detail.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Adhesion_detail.csv", "US-ASCII", ";",
								"\n", false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row3 = null;

						row3 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.NUM_ADHESION_NORMALISE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_ADHESION_NORMALISE", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.NUM_ADHESION_NORMALISE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.NUM_BENEFICIAIRE_UNIQUE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_BENEFICIAIRE_UNIQUE", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.NUM_BENEFICIAIRE_UNIQUE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row3.DATE_NAISSANCE_ASSURE = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.CODE_POSTAL = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_POSTAL", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.CODE_POSTAL = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.EXERCICE_PAIEMENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"EXERCICE_PAIEMENT", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.EXERCICE_PAIEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.NUM_BENEFICIAIRE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_BENEFICIAIRE", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.NUM_BENEFICIAIRE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row3.TYPE_BENEFICIAIRE = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row3.DATE_NAISSANCE_BENEFICIAIRE = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row3.CODE_PROFESSION = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.CODE_PRODUIT = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_PRODUIT", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.CODE_PRODUIT = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.CODE_FRACTIONNEMENT = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_FRACTIONNEMENT", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.CODE_FRACTIONNEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row3.CODE_GARANTIE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row3.FORMULE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.PRIMES_ACQUISES = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"PRIMES_ACQUISES", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.PRIMES_ACQUISES = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 14;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.CODE_AGENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_AGENT", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.CODE_AGENT = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 15;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row3.CODE_REGION = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_REGION", "row3", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row3.CODE_REGION = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row3.PRIME_GARANTIE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tAdvancedHash_row3 main ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							row3Struct row3_HashRow = new row3Struct();

							row3_HashRow.NUM_ADHESION_NORMALISE = row3.NUM_ADHESION_NORMALISE;

							row3_HashRow.NUM_BENEFICIAIRE_UNIQUE = row3.NUM_BENEFICIAIRE_UNIQUE;

							row3_HashRow.DATE_NAISSANCE_ASSURE = row3.DATE_NAISSANCE_ASSURE;

							row3_HashRow.CODE_POSTAL = row3.CODE_POSTAL;

							row3_HashRow.EXERCICE_PAIEMENT = row3.EXERCICE_PAIEMENT;

							row3_HashRow.NUM_BENEFICIAIRE = row3.NUM_BENEFICIAIRE;

							row3_HashRow.TYPE_BENEFICIAIRE = row3.TYPE_BENEFICIAIRE;

							row3_HashRow.DATE_NAISSANCE_BENEFICIAIRE = row3.DATE_NAISSANCE_BENEFICIAIRE;

							row3_HashRow.CODE_PROFESSION = row3.CODE_PROFESSION;

							row3_HashRow.CODE_PRODUIT = row3.CODE_PRODUIT;

							row3_HashRow.CODE_FRACTIONNEMENT = row3.CODE_FRACTIONNEMENT;

							row3_HashRow.CODE_GARANTIE = row3.CODE_GARANTIE;

							row3_HashRow.FORMULE = row3.FORMULE;

							row3_HashRow.PRIMES_ACQUISES = row3.PRIMES_ACQUISES;

							row3_HashRow.CODE_AGENT = row3.CODE_AGENT;

							row3_HashRow.CODE_REGION = row3.CODE_REGION;

							row3_HashRow.PRIME_GARANTIE = row3.PRIME_GARANTIE;

							tHash_Lookup_row3.put(row3_HashRow);

							tos_count_tAdvancedHash_row3++;

							/**
							 * [tAdvancedHash_row3 main ] stop
							 */

							/**
							 * [tAdvancedHash_row3 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							/**
							 * [tAdvancedHash_row3 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row3 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							/**
							 * [tAdvancedHash_row3 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Adhesion_detail.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];

		public Integer b_id;

		public Integer getB_id() {
			return this.b_id;
		}

		public Integer cp;

		public Integer getCp() {
			return this.cp;
		}

		public Integer age_id;

		public Integer getAge_id() {
			return this.age_id;
		}

		public String Acte;

		public String getActe() {
			return this.Acte;
		}

		public String c_id;

		public String getC_id() {
			return this.c_id;
		}

		public java.util.Date date_soins;

		public java.util.Date getDate_soins() {
			return this.date_soins;
		}

		public java.util.Date date_remboursements;

		public java.util.Date getDate_remboursements() {
			return this.date_remboursements;
		}

		public Float temperature;

		public Float getTemperature() {
			return this.temperature;
		}

		public Integer anciennete;

		public Integer getAnciennete() {
			return this.anciennete;
		}

		public Float frais_reel;

		public Float getFrais_reel() {
			return this.frais_reel;
		}

		public Float montant_secu;

		public Float getMontant_secu() {
			return this.montant_secu;
		}

		public Float montant_rembourse;

		public Float getMontant_rembourse() {
			return this.montant_rembourse;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.b_id = readInteger(dis);

					this.cp = readInteger(dis);

					this.age_id = readInteger(dis);

					this.Acte = readString(dis);

					this.c_id = readString(dis);

					this.date_soins = readDate(dis);

					this.date_remboursements = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.temperature = null;
					} else {
						this.temperature = dis.readFloat();
					}

					this.anciennete = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.frais_reel = null;
					} else {
						this.frais_reel = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_secu = null;
					} else {
						this.montant_secu = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_rembourse = null;
					} else {
						this.montant_rembourse = dis.readFloat();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.b_id = readInteger(dis);

					this.cp = readInteger(dis);

					this.age_id = readInteger(dis);

					this.Acte = readString(dis);

					this.c_id = readString(dis);

					this.date_soins = readDate(dis);

					this.date_remboursements = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.temperature = null;
					} else {
						this.temperature = dis.readFloat();
					}

					this.anciennete = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.frais_reel = null;
					} else {
						this.frais_reel = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_secu = null;
					} else {
						this.montant_secu = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_rembourse = null;
					} else {
						this.montant_rembourse = dis.readFloat();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.b_id, dos);

				// Integer

				writeInteger(this.cp, dos);

				// Integer

				writeInteger(this.age_id, dos);

				// String

				writeString(this.Acte, dos);

				// String

				writeString(this.c_id, dos);

				// java.util.Date

				writeDate(this.date_soins, dos);

				// java.util.Date

				writeDate(this.date_remboursements, dos);

				// Float

				if (this.temperature == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.temperature);
				}

				// Integer

				writeInteger(this.anciennete, dos);

				// Float

				if (this.frais_reel == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.frais_reel);
				}

				// Float

				if (this.montant_secu == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.montant_secu);
				}

				// Float

				if (this.montant_rembourse == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.montant_rembourse);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.b_id, dos);

				// Integer

				writeInteger(this.cp, dos);

				// Integer

				writeInteger(this.age_id, dos);

				// String

				writeString(this.Acte, dos);

				// String

				writeString(this.c_id, dos);

				// java.util.Date

				writeDate(this.date_soins, dos);

				// java.util.Date

				writeDate(this.date_remboursements, dos);

				// Float

				if (this.temperature == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.temperature);
				}

				// Integer

				writeInteger(this.anciennete, dos);

				// Float

				if (this.frais_reel == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.frais_reel);
				}

				// Float

				if (this.montant_secu == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.montant_secu);
				}

				// Float

				if (this.montant_rembourse == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.montant_rembourse);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("b_id=" + String.valueOf(b_id));
			sb.append(",cp=" + String.valueOf(cp));
			sb.append(",age_id=" + String.valueOf(age_id));
			sb.append(",Acte=" + Acte);
			sb.append(",c_id=" + c_id);
			sb.append(",date_soins=" + String.valueOf(date_soins));
			sb.append(",date_remboursements=" + String.valueOf(date_remboursements));
			sb.append(",temperature=" + String.valueOf(temperature));
			sb.append(",anciennete=" + String.valueOf(anciennete));
			sb.append(",frais_reel=" + String.valueOf(frais_reel));
			sb.append(",montant_secu=" + String.valueOf(montant_secu));
			sb.append(",montant_rembourse=" + String.valueOf(montant_rembourse));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sinistreStruct implements routines.system.IPersistableRow<sinistreStruct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];

		public Integer b_id;

		public Integer getB_id() {
			return this.b_id;
		}

		public Integer cp;

		public Integer getCp() {
			return this.cp;
		}

		public Integer age_id;

		public Integer getAge_id() {
			return this.age_id;
		}

		public String Acte;

		public String getActe() {
			return this.Acte;
		}

		public String c_id;

		public String getC_id() {
			return this.c_id;
		}

		public java.util.Date date_soins;

		public java.util.Date getDate_soins() {
			return this.date_soins;
		}

		public java.util.Date date_remboursements;

		public java.util.Date getDate_remboursements() {
			return this.date_remboursements;
		}

		public Float temperature;

		public Float getTemperature() {
			return this.temperature;
		}

		public Integer anciennete;

		public Integer getAnciennete() {
			return this.anciennete;
		}

		public Float frais_reel;

		public Float getFrais_reel() {
			return this.frais_reel;
		}

		public Float montant_secu;

		public Float getMontant_secu() {
			return this.montant_secu;
		}

		public Float montant_rembourse;

		public Float getMontant_rembourse() {
			return this.montant_rembourse;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.b_id = readInteger(dis);

					this.cp = readInteger(dis);

					this.age_id = readInteger(dis);

					this.Acte = readString(dis);

					this.c_id = readString(dis);

					this.date_soins = readDate(dis);

					this.date_remboursements = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.temperature = null;
					} else {
						this.temperature = dis.readFloat();
					}

					this.anciennete = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.frais_reel = null;
					} else {
						this.frais_reel = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_secu = null;
					} else {
						this.montant_secu = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_rembourse = null;
					} else {
						this.montant_rembourse = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.b_id = readInteger(dis);

					this.cp = readInteger(dis);

					this.age_id = readInteger(dis);

					this.Acte = readString(dis);

					this.c_id = readString(dis);

					this.date_soins = readDate(dis);

					this.date_remboursements = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.temperature = null;
					} else {
						this.temperature = dis.readFloat();
					}

					this.anciennete = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.frais_reel = null;
					} else {
						this.frais_reel = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_secu = null;
					} else {
						this.montant_secu = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.montant_rembourse = null;
					} else {
						this.montant_rembourse = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.b_id, dos);

				// Integer

				writeInteger(this.cp, dos);

				// Integer

				writeInteger(this.age_id, dos);

				// String

				writeString(this.Acte, dos);

				// String

				writeString(this.c_id, dos);

				// java.util.Date

				writeDate(this.date_soins, dos);

				// java.util.Date

				writeDate(this.date_remboursements, dos);

				// Float

				if (this.temperature == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.temperature);
				}

				// Integer

				writeInteger(this.anciennete, dos);

				// Float

				if (this.frais_reel == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.frais_reel);
				}

				// Float

				if (this.montant_secu == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.montant_secu);
				}

				// Float

				if (this.montant_rembourse == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.montant_rembourse);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.b_id, dos);

				// Integer

				writeInteger(this.cp, dos);

				// Integer

				writeInteger(this.age_id, dos);

				// String

				writeString(this.Acte, dos);

				// String

				writeString(this.c_id, dos);

				// java.util.Date

				writeDate(this.date_soins, dos);

				// java.util.Date

				writeDate(this.date_remboursements, dos);

				// Float

				if (this.temperature == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.temperature);
				}

				// Integer

				writeInteger(this.anciennete, dos);

				// Float

				if (this.frais_reel == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.frais_reel);
				}

				// Float

				if (this.montant_secu == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.montant_secu);
				}

				// Float

				if (this.montant_rembourse == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.montant_rembourse);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("b_id=" + String.valueOf(b_id));
			sb.append(",cp=" + String.valueOf(cp));
			sb.append(",age_id=" + String.valueOf(age_id));
			sb.append(",Acte=" + Acte);
			sb.append(",c_id=" + c_id);
			sb.append(",date_soins=" + String.valueOf(date_soins));
			sb.append(",date_remboursements=" + String.valueOf(date_remboursements));
			sb.append(",temperature=" + String.valueOf(temperature));
			sb.append(",anciennete=" + String.valueOf(anciennete));
			sb.append(",frais_reel=" + String.valueOf(frais_reel));
			sb.append(",montant_secu=" + String.valueOf(montant_secu));
			sb.append(",montant_rembourse=" + String.valueOf(montant_rembourse));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sinistreStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sortieTMapStruct implements routines.system.IPersistableRow<sortieTMapStruct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];

		public Integer NUM_SINISTRE;

		public Integer getNUM_SINISTRE() {
			return this.NUM_SINISTRE;
		}

		public Integer NUM_ADHESION;

		public Integer getNUM_ADHESION() {
			return this.NUM_ADHESION;
		}

		public Integer NUM_BENEFICIAIRE_SINISTRE;

		public Integer getNUM_BENEFICIAIRE_SINISTRE() {
			return this.NUM_BENEFICIAIRE_SINISTRE;
		}

		public Integer ANNEE_DEBUT_SOINS;

		public Integer getANNEE_DEBUT_SOINS() {
			return this.ANNEE_DEBUT_SOINS;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_SINISTRE=" + String.valueOf(NUM_SINISTRE));
			sb.append(",NUM_ADHESION=" + String.valueOf(NUM_ADHESION));
			sb.append(",NUM_BENEFICIAIRE_SINISTRE=" + String.valueOf(NUM_BENEFICIAIRE_SINISTRE));
			sb.append(",ANNEE_DEBUT_SOINS=" + String.valueOf(ANNEE_DEBUT_SOINS));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sortieTMapStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];

		public Integer NUM_SINISTRE;

		public Integer getNUM_SINISTRE() {
			return this.NUM_SINISTRE;
		}

		public Integer NUM_ADHESION;

		public Integer getNUM_ADHESION() {
			return this.NUM_ADHESION;
		}

		public String ACTE;

		public String getACTE() {
			return this.ACTE;
		}

		public String DESIGNATION_ACTE;

		public String getDESIGNATION_ACTE() {
			return this.DESIGNATION_ACTE;
		}

		public String LIBELLE_BAREME;

		public String getLIBELLE_BAREME() {
			return this.LIBELLE_BAREME;
		}

		public Integer NUM_BENEFICIAIRE;

		public Integer getNUM_BENEFICIAIRE() {
			return this.NUM_BENEFICIAIRE;
		}

		public Integer NUM_BENEFICIAIRE_SINISTRE;

		public Integer getNUM_BENEFICIAIRE_SINISTRE() {
			return this.NUM_BENEFICIAIRE_SINISTRE;
		}

		public Integer JOUR_DEBUT_SOINS;

		public Integer getJOUR_DEBUT_SOINS() {
			return this.JOUR_DEBUT_SOINS;
		}

		public Integer MOIS_DEBUT_SOINS;

		public Integer getMOIS_DEBUT_SOINS() {
			return this.MOIS_DEBUT_SOINS;
		}

		public Integer ANNEE_DEBUT_SOINS;

		public Integer getANNEE_DEBUT_SOINS() {
			return this.ANNEE_DEBUT_SOINS;
		}

		public Integer JOUR_PAIEMENT;

		public Integer getJOUR_PAIEMENT() {
			return this.JOUR_PAIEMENT;
		}

		public Integer MOIS_PAIEMENT;

		public Integer getMOIS_PAIEMENT() {
			return this.MOIS_PAIEMENT;
		}

		public Integer ANNEE_PAIEMENT;

		public Integer getANNEE_PAIEMENT() {
			return this.ANNEE_PAIEMENT;
		}

		public Float FRAIS_REEL_ASSURE;

		public Float getFRAIS_REEL_ASSURE() {
			return this.FRAIS_REEL_ASSURE;
		}

		public Float MONTANT_SECU;

		public Float getMONTANT_SECU() {
			return this.MONTANT_SECU;
		}

		public Float MONTANT_REMBOURSE;

		public Float getMONTANT_REMBOURSE() {
			return this.MONTANT_REMBOURSE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_SINISTRE=" + String.valueOf(NUM_SINISTRE));
			sb.append(",NUM_ADHESION=" + String.valueOf(NUM_ADHESION));
			sb.append(",ACTE=" + ACTE);
			sb.append(",DESIGNATION_ACTE=" + DESIGNATION_ACTE);
			sb.append(",LIBELLE_BAREME=" + LIBELLE_BAREME);
			sb.append(",NUM_BENEFICIAIRE=" + String.valueOf(NUM_BENEFICIAIRE));
			sb.append(",NUM_BENEFICIAIRE_SINISTRE=" + String.valueOf(NUM_BENEFICIAIRE_SINISTRE));
			sb.append(",JOUR_DEBUT_SOINS=" + String.valueOf(JOUR_DEBUT_SOINS));
			sb.append(",MOIS_DEBUT_SOINS=" + String.valueOf(MOIS_DEBUT_SOINS));
			sb.append(",ANNEE_DEBUT_SOINS=" + String.valueOf(ANNEE_DEBUT_SOINS));
			sb.append(",JOUR_PAIEMENT=" + String.valueOf(JOUR_PAIEMENT));
			sb.append(",MOIS_PAIEMENT=" + String.valueOf(MOIS_PAIEMENT));
			sb.append(",ANNEE_PAIEMENT=" + String.valueOf(ANNEE_PAIEMENT));
			sb.append(",FRAIS_REEL_ASSURE=" + String.valueOf(FRAIS_REEL_ASSURE));
			sb.append(",MONTANT_SECU=" + String.valueOf(MONTANT_SECU));
			sb.append(",MONTANT_REMBOURSE=" + String.valueOf(MONTANT_REMBOURSE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];

		public Integer NUM_SINISTRE;

		public Integer getNUM_SINISTRE() {
			return this.NUM_SINISTRE;
		}

		public Integer NUM_ADHESION;

		public Integer getNUM_ADHESION() {
			return this.NUM_ADHESION;
		}

		public String ACTE;

		public String getACTE() {
			return this.ACTE;
		}

		public String DESIGNATION_ACTE;

		public String getDESIGNATION_ACTE() {
			return this.DESIGNATION_ACTE;
		}

		public String LIBELLE_BAREME;

		public String getLIBELLE_BAREME() {
			return this.LIBELLE_BAREME;
		}

		public Integer NUM_BENEFICIAIRE;

		public Integer getNUM_BENEFICIAIRE() {
			return this.NUM_BENEFICIAIRE;
		}

		public Integer NUM_BENEFICIAIRE_SINISTRE;

		public Integer getNUM_BENEFICIAIRE_SINISTRE() {
			return this.NUM_BENEFICIAIRE_SINISTRE;
		}

		public Integer JOUR_DEBUT_SOINS;

		public Integer getJOUR_DEBUT_SOINS() {
			return this.JOUR_DEBUT_SOINS;
		}

		public Integer MOIS_DEBUT_SOINS;

		public Integer getMOIS_DEBUT_SOINS() {
			return this.MOIS_DEBUT_SOINS;
		}

		public Integer ANNEE_DEBUT_SOINS;

		public Integer getANNEE_DEBUT_SOINS() {
			return this.ANNEE_DEBUT_SOINS;
		}

		public Integer JOUR_PAIEMENT;

		public Integer getJOUR_PAIEMENT() {
			return this.JOUR_PAIEMENT;
		}

		public Integer MOIS_PAIEMENT;

		public Integer getMOIS_PAIEMENT() {
			return this.MOIS_PAIEMENT;
		}

		public Integer ANNEE_PAIEMENT;

		public Integer getANNEE_PAIEMENT() {
			return this.ANNEE_PAIEMENT;
		}

		public Float FRAIS_REEL_ASSURE;

		public Float getFRAIS_REEL_ASSURE() {
			return this.FRAIS_REEL_ASSURE;
		}

		public Float MONTANT_SECU;

		public Float getMONTANT_SECU() {
			return this.MONTANT_SECU;
		}

		public Float MONTANT_REMBOURSE;

		public Float getMONTANT_REMBOURSE() {
			return this.MONTANT_REMBOURSE;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_SINISTRE=" + String.valueOf(NUM_SINISTRE));
			sb.append(",NUM_ADHESION=" + String.valueOf(NUM_ADHESION));
			sb.append(",ACTE=" + ACTE);
			sb.append(",DESIGNATION_ACTE=" + DESIGNATION_ACTE);
			sb.append(",LIBELLE_BAREME=" + LIBELLE_BAREME);
			sb.append(",NUM_BENEFICIAIRE=" + String.valueOf(NUM_BENEFICIAIRE));
			sb.append(",NUM_BENEFICIAIRE_SINISTRE=" + String.valueOf(NUM_BENEFICIAIRE_SINISTRE));
			sb.append(",JOUR_DEBUT_SOINS=" + String.valueOf(JOUR_DEBUT_SOINS));
			sb.append(",MOIS_DEBUT_SOINS=" + String.valueOf(MOIS_DEBUT_SOINS));
			sb.append(",ANNEE_DEBUT_SOINS=" + String.valueOf(ANNEE_DEBUT_SOINS));
			sb.append(",JOUR_PAIEMENT=" + String.valueOf(JOUR_PAIEMENT));
			sb.append(",MOIS_PAIEMENT=" + String.valueOf(MOIS_PAIEMENT));
			sb.append(",ANNEE_PAIEMENT=" + String.valueOf(ANNEE_PAIEMENT));
			sb.append(",FRAIS_REEL_ASSURE=" + String.valueOf(FRAIS_REEL_ASSURE));
			sb.append(",MONTANT_SECU=" + String.valueOf(MONTANT_SECU));
			sb.append(",MONTANT_REMBOURSE=" + String.valueOf(MONTANT_REMBOURSE));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];

		public Integer NUM_SINISTRE;

		public Integer getNUM_SINISTRE() {
			return this.NUM_SINISTRE;
		}

		public Integer NUM_ADHESION;

		public Integer getNUM_ADHESION() {
			return this.NUM_ADHESION;
		}

		public String ACTE;

		public String getACTE() {
			return this.ACTE;
		}

		public String DESIGNATION_ACTE;

		public String getDESIGNATION_ACTE() {
			return this.DESIGNATION_ACTE;
		}

		public String LIBELLE_BAREME;

		public String getLIBELLE_BAREME() {
			return this.LIBELLE_BAREME;
		}

		public Integer NUM_BENEFICIAIRE;

		public Integer getNUM_BENEFICIAIRE() {
			return this.NUM_BENEFICIAIRE;
		}

		public Integer NUM_BENEFICIAIRE_SINISTRE;

		public Integer getNUM_BENEFICIAIRE_SINISTRE() {
			return this.NUM_BENEFICIAIRE_SINISTRE;
		}

		public Integer JOUR_DEBUT_SOINS;

		public Integer getJOUR_DEBUT_SOINS() {
			return this.JOUR_DEBUT_SOINS;
		}

		public Integer MOIS_DEBUT_SOINS;

		public Integer getMOIS_DEBUT_SOINS() {
			return this.MOIS_DEBUT_SOINS;
		}

		public Integer ANNEE_DEBUT_SOINS;

		public Integer getANNEE_DEBUT_SOINS() {
			return this.ANNEE_DEBUT_SOINS;
		}

		public Integer JOUR_PAIEMENT;

		public Integer getJOUR_PAIEMENT() {
			return this.JOUR_PAIEMENT;
		}

		public Integer MOIS_PAIEMENT;

		public Integer getMOIS_PAIEMENT() {
			return this.MOIS_PAIEMENT;
		}

		public Integer ANNEE_PAIEMENT;

		public Integer getANNEE_PAIEMENT() {
			return this.ANNEE_PAIEMENT;
		}

		public Float FRAIS_REEL_ASSURE;

		public Float getFRAIS_REEL_ASSURE() {
			return this.FRAIS_REEL_ASSURE;
		}

		public Float MONTANT_SECU;

		public Float getMONTANT_SECU() {
			return this.MONTANT_SECU;
		}

		public Float MONTANT_REMBOURSE;

		public Float getMONTANT_REMBOURSE() {
			return this.MONTANT_REMBOURSE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_SINISTRE=" + String.valueOf(NUM_SINISTRE));
			sb.append(",NUM_ADHESION=" + String.valueOf(NUM_ADHESION));
			sb.append(",ACTE=" + ACTE);
			sb.append(",DESIGNATION_ACTE=" + DESIGNATION_ACTE);
			sb.append(",LIBELLE_BAREME=" + LIBELLE_BAREME);
			sb.append(",NUM_BENEFICIAIRE=" + String.valueOf(NUM_BENEFICIAIRE));
			sb.append(",NUM_BENEFICIAIRE_SINISTRE=" + String.valueOf(NUM_BENEFICIAIRE_SINISTRE));
			sb.append(",JOUR_DEBUT_SOINS=" + String.valueOf(JOUR_DEBUT_SOINS));
			sb.append(",MOIS_DEBUT_SOINS=" + String.valueOf(MOIS_DEBUT_SOINS));
			sb.append(",ANNEE_DEBUT_SOINS=" + String.valueOf(ANNEE_DEBUT_SOINS));
			sb.append(",JOUR_PAIEMENT=" + String.valueOf(JOUR_PAIEMENT));
			sb.append(",MOIS_PAIEMENT=" + String.valueOf(MOIS_PAIEMENT));
			sb.append(",ANNEE_PAIEMENT=" + String.valueOf(ANNEE_PAIEMENT));
			sb.append(",FRAIS_REEL_ASSURE=" + String.valueOf(FRAIS_REEL_ASSURE));
			sb.append(",MONTANT_SECU=" + String.valueOf(MONTANT_SECU));
			sb.append(",MONTANT_REMBOURSE=" + String.valueOf(MONTANT_REMBOURSE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];

		public Integer NUM_SINISTRE;

		public Integer getNUM_SINISTRE() {
			return this.NUM_SINISTRE;
		}

		public Integer NUM_ADHESION;

		public Integer getNUM_ADHESION() {
			return this.NUM_ADHESION;
		}

		public String ACTE;

		public String getACTE() {
			return this.ACTE;
		}

		public String DESIGNATION_ACTE;

		public String getDESIGNATION_ACTE() {
			return this.DESIGNATION_ACTE;
		}

		public String LIBELLE_BAREME;

		public String getLIBELLE_BAREME() {
			return this.LIBELLE_BAREME;
		}

		public Integer NUM_BENEFICIAIRE;

		public Integer getNUM_BENEFICIAIRE() {
			return this.NUM_BENEFICIAIRE;
		}

		public Integer NUM_BENEFICIAIRE_SINISTRE;

		public Integer getNUM_BENEFICIAIRE_SINISTRE() {
			return this.NUM_BENEFICIAIRE_SINISTRE;
		}

		public Integer JOUR_DEBUT_SOINS;

		public Integer getJOUR_DEBUT_SOINS() {
			return this.JOUR_DEBUT_SOINS;
		}

		public Integer MOIS_DEBUT_SOINS;

		public Integer getMOIS_DEBUT_SOINS() {
			return this.MOIS_DEBUT_SOINS;
		}

		public Integer ANNEE_DEBUT_SOINS;

		public Integer getANNEE_DEBUT_SOINS() {
			return this.ANNEE_DEBUT_SOINS;
		}

		public Integer JOUR_PAIEMENT;

		public Integer getJOUR_PAIEMENT() {
			return this.JOUR_PAIEMENT;
		}

		public Integer MOIS_PAIEMENT;

		public Integer getMOIS_PAIEMENT() {
			return this.MOIS_PAIEMENT;
		}

		public Integer ANNEE_PAIEMENT;

		public Integer getANNEE_PAIEMENT() {
			return this.ANNEE_PAIEMENT;
		}

		public Float FRAIS_REEL_ASSURE;

		public Float getFRAIS_REEL_ASSURE() {
			return this.FRAIS_REEL_ASSURE;
		}

		public Float MONTANT_SECU;

		public Float getMONTANT_SECU() {
			return this.MONTANT_SECU;
		}

		public Float MONTANT_REMBOURSE;

		public Float getMONTANT_REMBOURSE() {
			return this.MONTANT_REMBOURSE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_SINISTRE = readInteger(dis);

					this.NUM_ADHESION = readInteger(dis);

					this.ACTE = readString(dis);

					this.DESIGNATION_ACTE = readString(dis);

					this.LIBELLE_BAREME = readString(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.NUM_BENEFICIAIRE_SINISTRE = readInteger(dis);

					this.JOUR_DEBUT_SOINS = readInteger(dis);

					this.MOIS_DEBUT_SOINS = readInteger(dis);

					this.ANNEE_DEBUT_SOINS = readInteger(dis);

					this.JOUR_PAIEMENT = readInteger(dis);

					this.MOIS_PAIEMENT = readInteger(dis);

					this.ANNEE_PAIEMENT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.FRAIS_REEL_ASSURE = null;
					} else {
						this.FRAIS_REEL_ASSURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_SECU = null;
					} else {
						this.MONTANT_SECU = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MONTANT_REMBOURSE = null;
					} else {
						this.MONTANT_REMBOURSE = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_SINISTRE, dos);

				// Integer

				writeInteger(this.NUM_ADHESION, dos);

				// String

				writeString(this.ACTE, dos);

				// String

				writeString(this.DESIGNATION_ACTE, dos);

				// String

				writeString(this.LIBELLE_BAREME, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_SINISTRE, dos);

				// Integer

				writeInteger(this.JOUR_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.MOIS_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.ANNEE_DEBUT_SOINS, dos);

				// Integer

				writeInteger(this.JOUR_PAIEMENT, dos);

				// Integer

				writeInteger(this.MOIS_PAIEMENT, dos);

				// Integer

				writeInteger(this.ANNEE_PAIEMENT, dos);

				// Float

				if (this.FRAIS_REEL_ASSURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.FRAIS_REEL_ASSURE);
				}

				// Float

				if (this.MONTANT_SECU == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_SECU);
				}

				// Float

				if (this.MONTANT_REMBOURSE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MONTANT_REMBOURSE);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_SINISTRE=" + String.valueOf(NUM_SINISTRE));
			sb.append(",NUM_ADHESION=" + String.valueOf(NUM_ADHESION));
			sb.append(",ACTE=" + ACTE);
			sb.append(",DESIGNATION_ACTE=" + DESIGNATION_ACTE);
			sb.append(",LIBELLE_BAREME=" + LIBELLE_BAREME);
			sb.append(",NUM_BENEFICIAIRE=" + String.valueOf(NUM_BENEFICIAIRE));
			sb.append(",NUM_BENEFICIAIRE_SINISTRE=" + String.valueOf(NUM_BENEFICIAIRE_SINISTRE));
			sb.append(",JOUR_DEBUT_SOINS=" + String.valueOf(JOUR_DEBUT_SOINS));
			sb.append(",MOIS_DEBUT_SOINS=" + String.valueOf(MOIS_DEBUT_SOINS));
			sb.append(",ANNEE_DEBUT_SOINS=" + String.valueOf(ANNEE_DEBUT_SOINS));
			sb.append(",JOUR_PAIEMENT=" + String.valueOf(JOUR_PAIEMENT));
			sb.append(",MOIS_PAIEMENT=" + String.valueOf(MOIS_PAIEMENT));
			sb.append(",ANNEE_PAIEMENT=" + String.valueOf(ANNEE_PAIEMENT));
			sb.append(",FRAIS_REEL_ASSURE=" + String.valueOf(FRAIS_REEL_ASSURE));
			sb.append(",MONTANT_SECU=" + String.valueOf(MONTANT_SECU));
			sb.append(",MONTANT_REMBOURSE=" + String.valueOf(MONTANT_REMBOURSE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_1Process(globalMap);
				tFileInputDelimited_3Process(globalMap);
				tFileInputDelimited_4Process(globalMap);

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				sinistreStruct sinistre = new sinistreStruct();
				row5Struct row5 = new row5Struct();
				sortieTMapStruct sortieTMap = new sortieTMapStruct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:\\Users\\abdou\\Desktop\\M2 MIAGE BI\\SID\\data\\logs\\output_sinistre3"
								+ TalendDate.getDate("CCddMMYYYY HHmmss") + ".csv")).getAbsolutePath().replace("\\",
										"/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_3.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "sinistre");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "sinistre_fact";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;

				String properties_tDBOutput_1 = "useSSL=True & serverTimezone=Europe/Paris";
				if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
					properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3308" + "/" + "bi" + "?"
						+ properties_tDBOutput_1;

				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:Rc8U1/dfVKUUW9A/GpBAoZN9JsV6cFBnaHVh8w==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "sinistre_fact"
						+ "` (`b_id`,`cp`,`age_id`,`Acte`,`c_id`,`date_soins`,`date_remboursements`,`temperature`,`anciennete`,`frais_reel`,`montant_secu`,`montant_rembourse`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "sortieTMap");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:\\Users\\abdou\\Desktop\\M2 MIAGE BI\\SID\\data\\logs\\output_sinistre2"
								+ TalendDate.getDate("CCddMMYYYY HHmmss") + ".csv")).getAbsolutePath().replace("\\",
										"/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_2.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				sinistreStruct sinistre_tmp = new sinistreStruct();
				sortieTMapStruct sortieTMap_tmp = new sortieTMapStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:\\Users\\abdou\\Desktop\\M2 MIAGE BI\\SID\\data\\logs\\output_sinistre1"
								+ TalendDate.getDate("CCddMMYYYY HHmmss") + ".csv")).getAbsolutePath().replace("\\",
										"/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_1.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Prestations_sante.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Prestations_sante.csv", "US-ASCII",
								";", "\n", false, 1, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.NUM_SINISTRE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_SINISTRE", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.NUM_SINISTRE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.NUM_ADHESION = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_ADHESION", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.NUM_ADHESION = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row1.ACTE = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row1.DESIGNATION_ACTE = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row1.LIBELLE_BAREME = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.NUM_BENEFICIAIRE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_BENEFICIAIRE", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.NUM_BENEFICIAIRE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 6;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.NUM_BENEFICIAIRE_SINISTRE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_BENEFICIAIRE_SINISTRE", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.NUM_BENEFICIAIRE_SINISTRE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 7;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.JOUR_DEBUT_SOINS = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"JOUR_DEBUT_SOINS", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.JOUR_DEBUT_SOINS = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 8;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.MOIS_DEBUT_SOINS = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MOIS_DEBUT_SOINS", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.MOIS_DEBUT_SOINS = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 9;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.ANNEE_DEBUT_SOINS = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ANNEE_DEBUT_SOINS", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.ANNEE_DEBUT_SOINS = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 10;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.JOUR_PAIEMENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"JOUR_PAIEMENT", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.JOUR_PAIEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 11;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.MOIS_PAIEMENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MOIS_PAIEMENT", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.MOIS_PAIEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 12;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.ANNEE_PAIEMENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ANNEE_PAIEMENT", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.ANNEE_PAIEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 13;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.FRAIS_REEL_ASSURE = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"FRAIS_REEL_ASSURE", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.FRAIS_REEL_ASSURE = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 14;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.MONTANT_SECU = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MONTANT_SECU", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.MONTANT_SECU = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 15;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row1.MONTANT_REMBOURSE = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MONTANT_REMBOURSE", "row1", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row1.MONTANT_REMBOURSE = null;

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {
							row4 = null;
							row5 = null;

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							row4 = null;
							row2 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1
									.matches(
											(row1.FRAIS_REEL_ASSURE == null ? false
													: row1.FRAIS_REEL_ASSURE.compareTo(
															ParserUtils.parseTo_Float(String.valueOf(0))) >= 0),
											"FRAIS_REEL_ASSURE.compareTo(0) >= 0 failed");

							ope_tFilterRow_1
									.matches(
											(row1.MONTANT_SECU == null ? false
													: row1.MONTANT_SECU.compareTo(
															ParserUtils.parseTo_Float(String.valueOf(0))) >= 0),
											"MONTANT_SECU.compareTo(0) >= 0 failed");

							ope_tFilterRow_1
									.matches(
											(row1.MONTANT_REMBOURSE == null ? false
													: row1.MONTANT_REMBOURSE.compareTo(
															ParserUtils.parseTo_Float(String.valueOf(0))) >= 0),
											"MONTANT_REMBOURSE.compareTo(0) >= 0 failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row2 == null) {
									row2 = new row2Struct();
								}
								row2.NUM_SINISTRE = row1.NUM_SINISTRE;
								row2.NUM_ADHESION = row1.NUM_ADHESION;
								row2.ACTE = row1.ACTE;
								row2.DESIGNATION_ACTE = row1.DESIGNATION_ACTE;
								row2.LIBELLE_BAREME = row1.LIBELLE_BAREME;
								row2.NUM_BENEFICIAIRE = row1.NUM_BENEFICIAIRE;
								row2.NUM_BENEFICIAIRE_SINISTRE = row1.NUM_BENEFICIAIRE_SINISTRE;
								row2.JOUR_DEBUT_SOINS = row1.JOUR_DEBUT_SOINS;
								row2.MOIS_DEBUT_SOINS = row1.MOIS_DEBUT_SOINS;
								row2.ANNEE_DEBUT_SOINS = row1.ANNEE_DEBUT_SOINS;
								row2.JOUR_PAIEMENT = row1.JOUR_PAIEMENT;
								row2.MOIS_PAIEMENT = row1.MOIS_PAIEMENT;
								row2.ANNEE_PAIEMENT = row1.ANNEE_PAIEMENT;
								row2.FRAIS_REEL_ASSURE = row1.FRAIS_REEL_ASSURE;
								row2.MONTANT_SECU = row1.MONTANT_SECU;
								row2.MONTANT_REMBOURSE = row1.MONTANT_REMBOURSE;
								nb_line_ok_tFilterRow_1++;
							} else {
								if (row4 == null) {
									row4 = new row4Struct();
								}
								row4.NUM_SINISTRE = row1.NUM_SINISTRE;
								row4.NUM_ADHESION = row1.NUM_ADHESION;
								row4.ACTE = row1.ACTE;
								row4.DESIGNATION_ACTE = row1.DESIGNATION_ACTE;
								row4.LIBELLE_BAREME = row1.LIBELLE_BAREME;
								row4.NUM_BENEFICIAIRE = row1.NUM_BENEFICIAIRE;
								row4.NUM_BENEFICIAIRE_SINISTRE = row1.NUM_BENEFICIAIRE_SINISTRE;
								row4.JOUR_DEBUT_SOINS = row1.JOUR_DEBUT_SOINS;
								row4.MOIS_DEBUT_SOINS = row1.MOIS_DEBUT_SOINS;
								row4.ANNEE_DEBUT_SOINS = row1.ANNEE_DEBUT_SOINS;
								row4.JOUR_PAIEMENT = row1.JOUR_PAIEMENT;
								row4.MOIS_PAIEMENT = row1.MOIS_PAIEMENT;
								row4.ANNEE_PAIEMENT = row1.ANNEE_PAIEMENT;
								row4.FRAIS_REEL_ASSURE = row1.FRAIS_REEL_ASSURE;
								row4.MONTANT_SECU = row1.MONTANT_SECU;
								row4.MONTANT_REMBOURSE = row1.MONTANT_REMBOURSE;
								row4.errorMessage = ope_tFilterRow_1.getErrorMsg();
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {
								row5 = null;

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row2"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row3"
								///////////////////////////////////////////////

								boolean forceLooprow3 = false;

								row3Struct row3ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row3HashKey.NUM_ADHESION_NORMALISE = row2.NUM_ADHESION;

									row3HashKey.NUM_BENEFICIAIRE_UNIQUE = row2.NUM_BENEFICIAIRE_SINISTRE;

									row3HashKey.EXERCICE_PAIEMENT = row2.ANNEE_DEBUT_SOINS;

									row3HashKey.hashCodeDirty = true;

									tHash_Lookup_row3.lookup(row3HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3'
									// and it contains more one result from keys : row3.NUM_ADHESION_NORMALISE = '"
									// + row3HashKey.NUM_ADHESION_NORMALISE + "', row3.NUM_BENEFICIAIRE_UNIQUE = '"
									// + row3HashKey.NUM_BENEFICIAIRE_UNIQUE + "', row3.EXERCICE_PAIEMENT = '" +
									// row3HashKey.EXERCICE_PAIEMENT + "'");
								} // G 071

								row3Struct row3 = null;

								row3Struct fromLookup_row3 = null;
								row3 = row3Default;

								if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099

									fromLookup_row3 = tHash_Lookup_row3.next();

								} // G 099

								if (fromLookup_row3 != null) {
									row3 = fromLookup_row3;
								}

								///////////////////////////////////////////////
								// Starting Lookup Table "row6"
								///////////////////////////////////////////////

								boolean forceLooprow6 = false;

								row6Struct row6ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row6HashKey.date = TalendDate.parseDate("dd-MM-yyyy",
											String.valueOf(row2.JOUR_DEBUT_SOINS) + "-"
													+ String.valueOf(row2.MOIS_DEBUT_SOINS) + "-"
													+ String.valueOf(row2.ANNEE_DEBUT_SOINS)) == null
															? null
															: new java.util.Date(TalendDate.parseDate("dd-MM-yyyy",
																	String.valueOf(row2.JOUR_DEBUT_SOINS) + "-"
																			+ String.valueOf(row2.MOIS_DEBUT_SOINS)
																			+ "-"
																			+ String.valueOf(row2.ANNEE_DEBUT_SOINS))
																	.getTime());

									row6HashKey.departement = row3.CODE_POSTAL != null
											? (row3.CODE_POSTAL >= 97000
													? String.format("%05d", row3.CODE_POSTAL).substring(0, 3)
													: String.format("%05d", row3.CODE_POSTAL).substring(0, 2))
											: null; // Retourne null si le code postal est null ;

									row6HashKey.hashCodeDirty = true;

									tHash_Lookup_row6.lookup(row6HashKey);

									if (!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_1 = true;

										forceLooprow6 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow6 = true;
								} // G 21

								row6Struct row6 = null;

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) || forceLooprow6) { // G_TM_M_043

									// CALL close loop of lookup 'row6'

									row6Struct fromLookup_row6 = null;
									row6 = row6Default;

									if (!forceLooprow6) { // G 46

										fromLookup_row6 = tHash_Lookup_row6.next();

										if (fromLookup_row6 != null) {
											row6 = fromLookup_row6;
										}

									} // G 46

									forceLooprow6 = false;

									///////////////////////////////////////////////
									// Starting Lookup Table "row8"
									///////////////////////////////////////////////

									boolean forceLooprow8 = false;

									row8Struct row8ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_1 = false;

										row8HashKey.NUM_BENEFICIAIRE_UNIQUE = row2.NUM_BENEFICIAIRE_SINISTRE;

										row8HashKey.hashCodeDirty = true;

										tHash_Lookup_row8.lookup(row8HashKey);

										if (!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_1 = true;

											forceLooprow8 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow8 = true;
									} // G 21

									row8Struct row8 = null;

									while ((tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext())
											|| forceLooprow8) { // G_TM_M_043

										// CALL close loop of lookup 'row8'

										row8Struct fromLookup_row8 = null;
										row8 = row8Default;

										if (!forceLooprow8) { // G 46

											fromLookup_row8 = tHash_Lookup_row8.next();

											if (fromLookup_row8 != null) {
												row8 = fromLookup_row8;
											}

										} // G 46

										forceLooprow8 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
											// ###############################
											// # Output tables

											sortieTMap = null;
											sinistre = null;

											boolean rejected_tMap_1 = true;
											if (!rejectedInnerJoin_tMap_1) {
											} // closing inner join bracket (1)
											else {
												rejected_tMap_1 = false;
											} // closing else inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'sortieTMap'
// # Filter conditions 
											if (rejectedInnerJoin_tMap_1) {
												sortieTMap_tmp.NUM_SINISTRE = row2.NUM_SINISTRE;
												sortieTMap_tmp.NUM_ADHESION = row2.NUM_ADHESION;
												sortieTMap_tmp.NUM_BENEFICIAIRE_SINISTRE = row2.NUM_BENEFICIAIRE_SINISTRE;
												sortieTMap_tmp.ANNEE_DEBUT_SOINS = row2.ANNEE_DEBUT_SOINS;
												sortieTMap = sortieTMap_tmp;
											} // closing filter/reject

// # Output reject table : 'sinistre'
// # Filter conditions 
											if (rejected_tMap_1) {
												sinistre_tmp.b_id = row2.NUM_BENEFICIAIRE_SINISTRE;
												sinistre_tmp.cp = row3.CODE_POSTAL;
												sinistre_tmp.age_id = row3.DATE_NAISSANCE_ASSURE != null
														&& row2.ANNEE_DEBUT_SOINS != null
														&& row2.MOIS_DEBUT_SOINS != null
														&& row2.JOUR_DEBUT_SOINS != null
																? (TalendDate
																		.getPartOfDate("YEAR", TalendDate.parseDate(
																				"yyyy-MM-dd",
																				row2.ANNEE_DEBUT_SOINS + "-"
																						+ String.format("%02d",
																								row2.MOIS_DEBUT_SOINS)
																						+ "-"
																						+ String.format("%02d",
																								row2.JOUR_DEBUT_SOINS)))
																		- TalendDate.getPartOfDate("YEAR",
																				TalendDate.parseDate("dd/MM/yyyy",
																						row3.DATE_NAISSANCE_ASSURE))
																		- ((TalendDate.getPartOfDate("MONTH",
																				TalendDate.parseDate("yyyy-MM-dd",
																						row2.ANNEE_DEBUT_SOINS + "-"
																								+ String.format("%02d",
																										row2.MOIS_DEBUT_SOINS)
																								+ "-"
																								+ String.format("%02d",
																										row2.JOUR_DEBUT_SOINS))) < TalendDate
																												.getPartOfDate(
																														"MONTH",
																														TalendDate
																																.parseDate(
																																		"dd/MM/yyyy",
																																		row3.DATE_NAISSANCE_ASSURE)))
																				|| (TalendDate.getPartOfDate("MONTH",
																						TalendDate.parseDate(
																								"yyyy-MM-dd",
																								row2.ANNEE_DEBUT_SOINS
																										+ "-"
																										+ String.format(
																												"%02d",
																												row2.MOIS_DEBUT_SOINS)
																										+ "-"
																										+ String.format(
																												"%02d",
																												row2.JOUR_DEBUT_SOINS))) == TalendDate
																														.getPartOfDate(
																																"MONTH",
																																TalendDate
																																		.parseDate(
																																				"dd/MM/yyyy",
																																				row3.DATE_NAISSANCE_ASSURE))
																						&& TalendDate.getPartOfDate(
																								"DAY_OF_MONTH",
																								TalendDate.parseDate(
																										"yyyy-MM-dd",
																										row2.ANNEE_DEBUT_SOINS
																												+ "-"
																												+ String.format(
																														"%02d",
																														row2.MOIS_DEBUT_SOINS)
																												+ "-"
																												+ String.format(
																														"%02d",
																														row2.JOUR_DEBUT_SOINS))) < TalendDate
																																.getPartOfDate(
																																		"DAY_OF_MONTH",
																																		TalendDate
																																				.parseDate(
																																						"dd/MM/yyyy",
																																						row3.DATE_NAISSANCE_ASSURE)))
																																								? 1
																																								: 0))
																: null;
												sinistre_tmp.Acte = row2.ACTE;
												sinistre_tmp.c_id = (row3.NUM_ADHESION_NORMALISE != null
														? row3.NUM_ADHESION_NORMALISE.toString()
														: "") + row3.NUM_BENEFICIAIRE_UNIQUE + row3.EXERCICE_PAIEMENT;
												sinistre_tmp.date_soins = TalendDate.parseDate("dd-MM-yyyy",
														String.valueOf(row2.JOUR_DEBUT_SOINS) + "-"
																+ String.valueOf(row2.MOIS_DEBUT_SOINS) + "-"
																+ String.valueOf(row2.ANNEE_DEBUT_SOINS));
												sinistre_tmp.date_remboursements = TalendDate.parseDate("dd-MM-yyyy",
														String.valueOf(row2.JOUR_PAIEMENT) + "-"
																+ String.valueOf(row2.MOIS_PAIEMENT) + "-"
																+ String.valueOf(row2.ANNEE_PAIEMENT));
												sinistre_tmp.temperature = (row6.tempmin + row6.tempmax) / (2.0f);
												sinistre_tmp.anciennete = row2.ANNEE_DEBUT_SOINS
														- row8.EXERCICE_PAIEMENT;
												sinistre_tmp.frais_reel = row2.FRAIS_REEL_ASSURE;
												sinistre_tmp.montant_secu = row2.MONTANT_SECU;
												sinistre_tmp.montant_rembourse = row2.MONTANT_REMBOURSE;
												sinistre = sinistre_tmp;
											} // closing filter/reject
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_1 = false;

										tos_count_tMap_1++;

										/**
										 * [tMap_1 main ] stop
										 */

										/**
										 * [tMap_1 process_data_begin ] start
										 */

										currentComponent = "tMap_1";

										/**
										 * [tMap_1 process_data_begin ] stop
										 */
// Start of branch "sinistre"
										if (sinistre != null) {
											row5 = null;

											/**
											 * [tDBOutput_1 main ] start
											 */

											currentComponent = "tDBOutput_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "sinistre"

												);
											}

											row5 = null;
											whetherReject_tDBOutput_1 = false;
											if (sinistre.b_id == null) {
												pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
											} else {
												pstmt_tDBOutput_1.setInt(1, sinistre.b_id);
											}

											if (sinistre.cp == null) {
												pstmt_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
											} else {
												pstmt_tDBOutput_1.setInt(2, sinistre.cp);
											}

											if (sinistre.age_id == null) {
												pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
											} else {
												pstmt_tDBOutput_1.setInt(3, sinistre.age_id);
											}

											if (sinistre.Acte == null) {
												pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(4, sinistre.Acte);
											}

											if (sinistre.c_id == null) {
												pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(5, sinistre.c_id);
											}

											if (sinistre.date_soins != null) {
												date_tDBOutput_1 = sinistre.date_soins.getTime();
												if (date_tDBOutput_1 < year1_tDBOutput_1
														|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
													pstmt_tDBOutput_1.setString(6, "0000-00-00 00:00:00");
												} else {
													pstmt_tDBOutput_1.setTimestamp(6,
															new java.sql.Timestamp(date_tDBOutput_1));
												}
											} else {
												pstmt_tDBOutput_1.setNull(6, java.sql.Types.DATE);
											}

											if (sinistre.date_remboursements != null) {
												date_tDBOutput_1 = sinistre.date_remboursements.getTime();
												if (date_tDBOutput_1 < year1_tDBOutput_1
														|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
													pstmt_tDBOutput_1.setString(7, "0000-00-00 00:00:00");
												} else {
													pstmt_tDBOutput_1.setTimestamp(7,
															new java.sql.Timestamp(date_tDBOutput_1));
												}
											} else {
												pstmt_tDBOutput_1.setNull(7, java.sql.Types.DATE);
											}

											if (sinistre.temperature == null) {
												pstmt_tDBOutput_1.setNull(8, java.sql.Types.FLOAT);
											} else {
												pstmt_tDBOutput_1.setFloat(8, sinistre.temperature);
											}

											if (sinistre.anciennete == null) {
												pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
											} else {
												pstmt_tDBOutput_1.setInt(9, sinistre.anciennete);
											}

											if (sinistre.frais_reel == null) {
												pstmt_tDBOutput_1.setNull(10, java.sql.Types.FLOAT);
											} else {
												pstmt_tDBOutput_1.setFloat(10, sinistre.frais_reel);
											}

											if (sinistre.montant_secu == null) {
												pstmt_tDBOutput_1.setNull(11, java.sql.Types.FLOAT);
											} else {
												pstmt_tDBOutput_1.setFloat(11, sinistre.montant_secu);
											}

											if (sinistre.montant_rembourse == null) {
												pstmt_tDBOutput_1.setNull(12, java.sql.Types.FLOAT);
											} else {
												pstmt_tDBOutput_1.setFloat(12, sinistre.montant_rembourse);
											}

											try {
												nb_line_tDBOutput_1++;
												int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
												insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
												rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
											} catch (java.lang.Exception e) {
												globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
												whetherReject_tDBOutput_1 = true;
												row5 = new row5Struct();
												row5.b_id = sinistre.b_id;
												row5.cp = sinistre.cp;
												row5.age_id = sinistre.age_id;
												row5.Acte = sinistre.Acte;
												row5.c_id = sinistre.c_id;
												row5.date_soins = sinistre.date_soins;
												row5.date_remboursements = sinistre.date_remboursements;
												row5.temperature = sinistre.temperature;
												row5.anciennete = sinistre.anciennete;
												row5.frais_reel = sinistre.frais_reel;
												row5.montant_secu = sinistre.montant_secu;
												row5.montant_rembourse = sinistre.montant_rembourse;
												rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
												row5.errorCode = ((java.sql.SQLException) e).getSQLState();
												row5.errorMessage = e.getMessage() + " - Line: "
														+ tos_count_tDBOutput_1;
											}
											if (!whetherReject_tDBOutput_1) {
											}
											commitCounter_tDBOutput_1++;

											if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

												if (rowsToCommitCount_tDBOutput_1 != 0) {
												}
												conn_tDBOutput_1.commit();
												if (rowsToCommitCount_tDBOutput_1 != 0) {
													rowsToCommitCount_tDBOutput_1 = 0;
												}
												commitCounter_tDBOutput_1 = 0;

											}

											tos_count_tDBOutput_1++;

											/**
											 * [tDBOutput_1 main ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_begin ] stop
											 */
// Start of branch "row5"
											if (row5 != null) {

												/**
												 * [tFileOutputDelimited_3 main ] start
												 */

												currentComponent = "tFileOutputDelimited_3";

												if (execStat) {
													runStat.updateStatOnConnection(iterateId, 1, 1

															, "row5"

													);
												}

												StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
												if (row5.b_id != null) {
													sb_tFileOutputDelimited_3.append(row5.b_id);
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.cp != null) {
													sb_tFileOutputDelimited_3.append(row5.cp);
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.age_id != null) {
													sb_tFileOutputDelimited_3.append(row5.age_id);
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.Acte != null) {
													sb_tFileOutputDelimited_3.append(row5.Acte);
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.c_id != null) {
													sb_tFileOutputDelimited_3.append(row5.c_id);
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.date_soins != null) {
													sb_tFileOutputDelimited_3.append(
															FormatterUtils.format_Date(row5.date_soins, "dd-MM-yyyy"));
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.date_remboursements != null) {
													sb_tFileOutputDelimited_3.append(FormatterUtils
															.format_Date(row5.date_remboursements, "dd-MM-yyyy"));
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.temperature != null) {
													sb_tFileOutputDelimited_3.append(row5.temperature);
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.anciennete != null) {
													sb_tFileOutputDelimited_3.append(row5.anciennete);
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.frais_reel != null) {
													sb_tFileOutputDelimited_3.append(row5.frais_reel);
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.montant_secu != null) {
													sb_tFileOutputDelimited_3.append(row5.montant_secu);
												}
												sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
												if (row5.montant_rembourse != null) {
													sb_tFileOutputDelimited_3.append(row5.montant_rembourse);
												}
												sb_tFileOutputDelimited_3
														.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

												nb_line_tFileOutputDelimited_3++;
												resourceMap.put("nb_line_tFileOutputDelimited_3",
														nb_line_tFileOutputDelimited_3);

												outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

												tos_count_tFileOutputDelimited_3++;

												/**
												 * [tFileOutputDelimited_3 main ] stop
												 */

												/**
												 * [tFileOutputDelimited_3 process_data_begin ] start
												 */

												currentComponent = "tFileOutputDelimited_3";

												/**
												 * [tFileOutputDelimited_3 process_data_begin ] stop
												 */

												/**
												 * [tFileOutputDelimited_3 process_data_end ] start
												 */

												currentComponent = "tFileOutputDelimited_3";

												/**
												 * [tFileOutputDelimited_3 process_data_end ] stop
												 */

											} // End of branch "row5"

											/**
											 * [tDBOutput_1 process_data_end ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_end ] stop
											 */

										} // End of branch "sinistre"

// Start of branch "sortieTMap"
										if (sortieTMap != null) {

											/**
											 * [tFileOutputDelimited_2 main ] start
											 */

											currentComponent = "tFileOutputDelimited_2";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "sortieTMap"

												);
											}

											StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
											if (sortieTMap.NUM_SINISTRE != null) {
												sb_tFileOutputDelimited_2.append(sortieTMap.NUM_SINISTRE);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (sortieTMap.NUM_ADHESION != null) {
												sb_tFileOutputDelimited_2.append(sortieTMap.NUM_ADHESION);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (sortieTMap.NUM_BENEFICIAIRE_SINISTRE != null) {
												sb_tFileOutputDelimited_2.append(sortieTMap.NUM_BENEFICIAIRE_SINISTRE);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
											if (sortieTMap.ANNEE_DEBUT_SOINS != null) {
												sb_tFileOutputDelimited_2.append(sortieTMap.ANNEE_DEBUT_SOINS);
											}
											sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

											nb_line_tFileOutputDelimited_2++;
											resourceMap.put("nb_line_tFileOutputDelimited_2",
													nb_line_tFileOutputDelimited_2);

											outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

											tos_count_tFileOutputDelimited_2++;

											/**
											 * [tFileOutputDelimited_2 main ] stop
											 */

											/**
											 * [tFileOutputDelimited_2 process_data_begin ] start
											 */

											currentComponent = "tFileOutputDelimited_2";

											/**
											 * [tFileOutputDelimited_2 process_data_begin ] stop
											 */

											/**
											 * [tFileOutputDelimited_2 process_data_end ] start
											 */

											currentComponent = "tFileOutputDelimited_2";

											/**
											 * [tFileOutputDelimited_2 process_data_end ] stop
											 */

										} // End of branch "sortieTMap"

									} // close loop of lookup 'row8' // G_TM_M_043

								} // close loop of lookup 'row6' // G_TM_M_043

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row2"

// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row4"

									);
								}

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
								if (row4.NUM_SINISTRE != null) {
									sb_tFileOutputDelimited_1.append(row4.NUM_SINISTRE);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.NUM_ADHESION != null) {
									sb_tFileOutputDelimited_1.append(row4.NUM_ADHESION);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.ACTE != null) {
									sb_tFileOutputDelimited_1.append(row4.ACTE);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.DESIGNATION_ACTE != null) {
									sb_tFileOutputDelimited_1.append(row4.DESIGNATION_ACTE);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.LIBELLE_BAREME != null) {
									sb_tFileOutputDelimited_1.append(row4.LIBELLE_BAREME);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.NUM_BENEFICIAIRE != null) {
									sb_tFileOutputDelimited_1.append(row4.NUM_BENEFICIAIRE);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.NUM_BENEFICIAIRE_SINISTRE != null) {
									sb_tFileOutputDelimited_1.append(row4.NUM_BENEFICIAIRE_SINISTRE);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.JOUR_DEBUT_SOINS != null) {
									sb_tFileOutputDelimited_1.append(row4.JOUR_DEBUT_SOINS);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.MOIS_DEBUT_SOINS != null) {
									sb_tFileOutputDelimited_1.append(row4.MOIS_DEBUT_SOINS);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.ANNEE_DEBUT_SOINS != null) {
									sb_tFileOutputDelimited_1.append(row4.ANNEE_DEBUT_SOINS);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.JOUR_PAIEMENT != null) {
									sb_tFileOutputDelimited_1.append(row4.JOUR_PAIEMENT);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.MOIS_PAIEMENT != null) {
									sb_tFileOutputDelimited_1.append(row4.MOIS_PAIEMENT);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.ANNEE_PAIEMENT != null) {
									sb_tFileOutputDelimited_1.append(row4.ANNEE_PAIEMENT);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.FRAIS_REEL_ASSURE != null) {
									sb_tFileOutputDelimited_1.append(row4.FRAIS_REEL_ASSURE);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.MONTANT_SECU != null) {
									sb_tFileOutputDelimited_1.append(row4.MONTANT_SECU);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.MONTANT_REMBOURSE != null) {
									sb_tFileOutputDelimited_1.append(row4.MONTANT_REMBOURSE);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (row4.errorMessage != null) {
									sb_tFileOutputDelimited_1.append(row4.errorMessage);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_end ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Prestations_sante.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "sinistre");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "sortieTMap");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row8");

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public Float tempmin;

		public Float getTempmin() {
			return this.tempmin;
		}

		public Float tempmax;

		public Float getTempmax() {
			return this.tempmax;
		}

		public String ventmax;

		public String getVentmax() {
			return this.ventmax;
		}

		public String precip;

		public String getPrecip() {
			return this.precip;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());

				result = prime * result + ((this.departement == null) ? 0 : this.departement.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.date == null) {
				if (other.date != null)
					return false;

			} else if (!this.date.equals(other.date))

				return false;

			if (this.departement == null) {
				if (other.departement != null)
					return false;

			} else if (!this.departement.equals(other.departement))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.date = this.date;
			other.departement = this.departement;
			other.tempmin = this.tempmin;
			other.tempmax = this.tempmax;
			other.ventmax = this.ventmax;
			other.precip = this.precip;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.date = this.date;
			other.departement = this.departement;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.date = readDate(dis);

					this.departement = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.date = readDate(dis);

					this.departement = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.date, dos);

				// String

				writeString(this.departement, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.date, dos);

				// String

				writeString(this.departement, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.tempmin = null;
				} else {
					this.tempmin = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.tempmax = null;
				} else {
					this.tempmax = dis.readFloat();
				}

				this.ventmax = readString(dis, ois);

				this.precip = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				length = objectIn.readByte();
				if (length == -1) {
					this.tempmin = null;
				} else {
					this.tempmin = objectIn.readFloat();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.tempmax = null;
				} else {
					this.tempmax = objectIn.readFloat();
				}

				this.ventmax = readString(dis, objectIn);

				this.precip = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.tempmin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tempmin);
				}

				if (this.tempmax == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.tempmax);
				}

				writeString(this.ventmax, dos, oos);

				writeString(this.precip, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				if (this.tempmin == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeFloat(this.tempmin);
				}

				if (this.tempmax == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeFloat(this.tempmax);
				}

				writeString(this.ventmax, dos, objectOut);

				writeString(this.precip, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date=" + String.valueOf(date));
			sb.append(",departement=" + departement);
			sb.append(",tempmin=" + String.valueOf(tempmin));
			sb.append(",tempmax=" + String.valueOf(tempmax));
			sb.append(",ventmax=" + ventmax);
			sb.append(",precip=" + precip);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.date, other.date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.departement, other.departement);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tFileInputDelimited_3 - inputs:(after_tFileInputDelimited_2)
				// outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6)
				// outputs:()
				// linked node: tMap_1 - inputs:(row3,row2,row6,row8)
				// outputs:(sinistre,sortieTMap)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct>getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/MeteoByDep.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/MeteoByDep.csv", "US-ASCII", ";", "\n",
								false, 1, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row6 = null;

						row6 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row6 = new row6Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row6.date = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd");

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"date", "row6", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}

							} else {

								row6.date = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row6.departement = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row6.tempmin = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"tempmin", "row6", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row6.tempmin = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 3;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row6.tempmax = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"tempmax", "row6", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row6.tempmax = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 4;

							row6.ventmax = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row6.precip = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tAdvancedHash_row6 main ] start
							 */

							currentComponent = "tAdvancedHash_row6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row6"

								);
							}

							row6Struct row6_HashRow = new row6Struct();

							row6_HashRow.date = row6.date;

							row6_HashRow.departement = row6.departement;

							row6_HashRow.tempmin = row6.tempmin;

							row6_HashRow.tempmax = row6.tempmax;

							row6_HashRow.ventmax = row6.ventmax;

							row6_HashRow.precip = row6.precip;

							tHash_Lookup_row6.put(row6_HashRow);

							tos_count_tAdvancedHash_row6++;

							/**
							 * [tAdvancedHash_row6 main ] stop
							 */

							/**
							 * [tAdvancedHash_row6 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row6";

							/**
							 * [tAdvancedHash_row6 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row6 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row6";

							/**
							 * [tAdvancedHash_row6 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/MeteoByDep.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer NUM_BENEFICIAIRE_UNIQUE;

		public Integer getNUM_BENEFICIAIRE_UNIQUE() {
			return this.NUM_BENEFICIAIRE_UNIQUE;
		}

		public Integer EXERCICE_PAIEMENT;

		public Integer getEXERCICE_PAIEMENT() {
			return this.EXERCICE_PAIEMENT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.NUM_BENEFICIAIRE_UNIQUE == null) ? 0 : this.NUM_BENEFICIAIRE_UNIQUE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.NUM_BENEFICIAIRE_UNIQUE == null) {
				if (other.NUM_BENEFICIAIRE_UNIQUE != null)
					return false;

			} else if (!this.NUM_BENEFICIAIRE_UNIQUE.equals(other.NUM_BENEFICIAIRE_UNIQUE))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.NUM_BENEFICIAIRE_UNIQUE = this.NUM_BENEFICIAIRE_UNIQUE;
			other.EXERCICE_PAIEMENT = this.EXERCICE_PAIEMENT;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.NUM_BENEFICIAIRE_UNIQUE = this.NUM_BENEFICIAIRE_UNIQUE;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_BENEFICIAIRE_UNIQUE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_BENEFICIAIRE_UNIQUE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_UNIQUE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_UNIQUE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.EXERCICE_PAIEMENT = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.EXERCICE_PAIEMENT = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.EXERCICE_PAIEMENT, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.EXERCICE_PAIEMENT, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_BENEFICIAIRE_UNIQUE=" + String.valueOf(NUM_BENEFICIAIRE_UNIQUE));
			sb.append(",EXERCICE_PAIEMENT=" + String.valueOf(EXERCICE_PAIEMENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NUM_BENEFICIAIRE_UNIQUE, other.NUM_BENEFICIAIRE_UNIQUE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];

		public Integer NUM_BENEFICIAIRE_UNIQUE;

		public Integer getNUM_BENEFICIAIRE_UNIQUE() {
			return this.NUM_BENEFICIAIRE_UNIQUE;
		}

		public Integer EXERCICE_PAIEMENT;

		public Integer getEXERCICE_PAIEMENT() {
			return this.EXERCICE_PAIEMENT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_BENEFICIAIRE_UNIQUE = readInteger(dis);

					this.EXERCICE_PAIEMENT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_BENEFICIAIRE_UNIQUE = readInteger(dis);

					this.EXERCICE_PAIEMENT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_UNIQUE, dos);

				// Integer

				writeInteger(this.EXERCICE_PAIEMENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_UNIQUE, dos);

				// Integer

				writeInteger(this.EXERCICE_PAIEMENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_BENEFICIAIRE_UNIQUE=" + String.valueOf(NUM_BENEFICIAIRE_UNIQUE));
			sb.append(",EXERCICE_PAIEMENT=" + String.valueOf(EXERCICE_PAIEMENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_PROJET_TP_SID_SinistreFact = new byte[0];
		static byte[] commonByteArray_PROJET_TP_SID_SinistreFact = new byte[0];

		public Integer NUM_ADHESION_NORMALISE;

		public Integer getNUM_ADHESION_NORMALISE() {
			return this.NUM_ADHESION_NORMALISE;
		}

		public Integer NUM_BENEFICIAIRE_UNIQUE;

		public Integer getNUM_BENEFICIAIRE_UNIQUE() {
			return this.NUM_BENEFICIAIRE_UNIQUE;
		}

		public String DATE_NAISSANCE_ASSURE;

		public String getDATE_NAISSANCE_ASSURE() {
			return this.DATE_NAISSANCE_ASSURE;
		}

		public Integer CODE_POSTAL;

		public Integer getCODE_POSTAL() {
			return this.CODE_POSTAL;
		}

		public Integer EXERCICE_PAIEMENT;

		public Integer getEXERCICE_PAIEMENT() {
			return this.EXERCICE_PAIEMENT;
		}

		public Integer NUM_BENEFICIAIRE;

		public Integer getNUM_BENEFICIAIRE() {
			return this.NUM_BENEFICIAIRE;
		}

		public String TYPE_BENEFICIAIRE;

		public String getTYPE_BENEFICIAIRE() {
			return this.TYPE_BENEFICIAIRE;
		}

		public String DATE_NAISSANCE_BENEFICIAIRE;

		public String getDATE_NAISSANCE_BENEFICIAIRE() {
			return this.DATE_NAISSANCE_BENEFICIAIRE;
		}

		public String CODE_PROFESSION;

		public String getCODE_PROFESSION() {
			return this.CODE_PROFESSION;
		}

		public Character CODE_PRODUIT;

		public Character getCODE_PRODUIT() {
			return this.CODE_PRODUIT;
		}

		public Character CODE_FRACTIONNEMENT;

		public Character getCODE_FRACTIONNEMENT() {
			return this.CODE_FRACTIONNEMENT;
		}

		public String CODE_GARANTIE;

		public String getCODE_GARANTIE() {
			return this.CODE_GARANTIE;
		}

		public String FORMULE;

		public String getFORMULE() {
			return this.FORMULE;
		}

		public Float PRIMES_ACQUISES;

		public Float getPRIMES_ACQUISES() {
			return this.PRIMES_ACQUISES;
		}

		public Integer CODE_AGENT;

		public Integer getCODE_AGENT() {
			return this.CODE_AGENT;
		}

		public Integer CODE_REGION;

		public Integer getCODE_REGION() {
			return this.CODE_REGION;
		}

		public String PRIME_GARANTIE;

		public String getPRIME_GARANTIE() {
			return this.PRIME_GARANTIE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJET_TP_SID_SinistreFact.length) {
					if (length < 1024 && commonByteArray_PROJET_TP_SID_SinistreFact.length == 0) {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[1024];
					} else {
						commonByteArray_PROJET_TP_SID_SinistreFact = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length);
				strReturn = new String(commonByteArray_PROJET_TP_SID_SinistreFact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_ADHESION_NORMALISE = readInteger(dis);

					this.NUM_BENEFICIAIRE_UNIQUE = readInteger(dis);

					this.DATE_NAISSANCE_ASSURE = readString(dis);

					this.CODE_POSTAL = readInteger(dis);

					this.EXERCICE_PAIEMENT = readInteger(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.TYPE_BENEFICIAIRE = readString(dis);

					this.DATE_NAISSANCE_BENEFICIAIRE = readString(dis);

					this.CODE_PROFESSION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CODE_PRODUIT = null;
					} else {
						this.CODE_PRODUIT = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CODE_FRACTIONNEMENT = null;
					} else {
						this.CODE_FRACTIONNEMENT = dis.readChar();
					}

					this.CODE_GARANTIE = readString(dis);

					this.FORMULE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRIMES_ACQUISES = null;
					} else {
						this.PRIMES_ACQUISES = dis.readFloat();
					}

					this.CODE_AGENT = readInteger(dis);

					this.CODE_REGION = readInteger(dis);

					this.PRIME_GARANTIE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PROJET_TP_SID_SinistreFact) {

				try {

					int length = 0;

					this.NUM_ADHESION_NORMALISE = readInteger(dis);

					this.NUM_BENEFICIAIRE_UNIQUE = readInteger(dis);

					this.DATE_NAISSANCE_ASSURE = readString(dis);

					this.CODE_POSTAL = readInteger(dis);

					this.EXERCICE_PAIEMENT = readInteger(dis);

					this.NUM_BENEFICIAIRE = readInteger(dis);

					this.TYPE_BENEFICIAIRE = readString(dis);

					this.DATE_NAISSANCE_BENEFICIAIRE = readString(dis);

					this.CODE_PROFESSION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CODE_PRODUIT = null;
					} else {
						this.CODE_PRODUIT = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CODE_FRACTIONNEMENT = null;
					} else {
						this.CODE_FRACTIONNEMENT = dis.readChar();
					}

					this.CODE_GARANTIE = readString(dis);

					this.FORMULE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.PRIMES_ACQUISES = null;
					} else {
						this.PRIMES_ACQUISES = dis.readFloat();
					}

					this.CODE_AGENT = readInteger(dis);

					this.CODE_REGION = readInteger(dis);

					this.PRIME_GARANTIE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NUM_ADHESION_NORMALISE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_UNIQUE, dos);

				// String

				writeString(this.DATE_NAISSANCE_ASSURE, dos);

				// Integer

				writeInteger(this.CODE_POSTAL, dos);

				// Integer

				writeInteger(this.EXERCICE_PAIEMENT, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// String

				writeString(this.TYPE_BENEFICIAIRE, dos);

				// String

				writeString(this.DATE_NAISSANCE_BENEFICIAIRE, dos);

				// String

				writeString(this.CODE_PROFESSION, dos);

				// Character

				if (this.CODE_PRODUIT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.CODE_PRODUIT);
				}

				// Character

				if (this.CODE_FRACTIONNEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.CODE_FRACTIONNEMENT);
				}

				// String

				writeString(this.CODE_GARANTIE, dos);

				// String

				writeString(this.FORMULE, dos);

				// Float

				if (this.PRIMES_ACQUISES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRIMES_ACQUISES);
				}

				// Integer

				writeInteger(this.CODE_AGENT, dos);

				// Integer

				writeInteger(this.CODE_REGION, dos);

				// String

				writeString(this.PRIME_GARANTIE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.NUM_ADHESION_NORMALISE, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE_UNIQUE, dos);

				// String

				writeString(this.DATE_NAISSANCE_ASSURE, dos);

				// Integer

				writeInteger(this.CODE_POSTAL, dos);

				// Integer

				writeInteger(this.EXERCICE_PAIEMENT, dos);

				// Integer

				writeInteger(this.NUM_BENEFICIAIRE, dos);

				// String

				writeString(this.TYPE_BENEFICIAIRE, dos);

				// String

				writeString(this.DATE_NAISSANCE_BENEFICIAIRE, dos);

				// String

				writeString(this.CODE_PROFESSION, dos);

				// Character

				if (this.CODE_PRODUIT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.CODE_PRODUIT);
				}

				// Character

				if (this.CODE_FRACTIONNEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.CODE_FRACTIONNEMENT);
				}

				// String

				writeString(this.CODE_GARANTIE, dos);

				// String

				writeString(this.FORMULE, dos);

				// Float

				if (this.PRIMES_ACQUISES == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.PRIMES_ACQUISES);
				}

				// Integer

				writeInteger(this.CODE_AGENT, dos);

				// Integer

				writeInteger(this.CODE_REGION, dos);

				// String

				writeString(this.PRIME_GARANTIE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NUM_ADHESION_NORMALISE=" + String.valueOf(NUM_ADHESION_NORMALISE));
			sb.append(",NUM_BENEFICIAIRE_UNIQUE=" + String.valueOf(NUM_BENEFICIAIRE_UNIQUE));
			sb.append(",DATE_NAISSANCE_ASSURE=" + DATE_NAISSANCE_ASSURE);
			sb.append(",CODE_POSTAL=" + String.valueOf(CODE_POSTAL));
			sb.append(",EXERCICE_PAIEMENT=" + String.valueOf(EXERCICE_PAIEMENT));
			sb.append(",NUM_BENEFICIAIRE=" + String.valueOf(NUM_BENEFICIAIRE));
			sb.append(",TYPE_BENEFICIAIRE=" + TYPE_BENEFICIAIRE);
			sb.append(",DATE_NAISSANCE_BENEFICIAIRE=" + DATE_NAISSANCE_BENEFICIAIRE);
			sb.append(",CODE_PROFESSION=" + CODE_PROFESSION);
			sb.append(",CODE_PRODUIT=" + String.valueOf(CODE_PRODUIT));
			sb.append(",CODE_FRACTIONNEMENT=" + String.valueOf(CODE_FRACTIONNEMENT));
			sb.append(",CODE_GARANTIE=" + CODE_GARANTIE);
			sb.append(",FORMULE=" + FORMULE);
			sb.append(",PRIMES_ACQUISES=" + String.valueOf(PRIMES_ACQUISES));
			sb.append(",CODE_AGENT=" + String.valueOf(CODE_AGENT));
			sb.append(",CODE_REGION=" + String.valueOf(CODE_REGION));
			sb.append(",PRIME_GARANTIE=" + PRIME_GARANTIE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer NUM_BENEFICIAIRE_UNIQUE;
					Integer EXERCICE_PAIEMENT_min;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.NUM_BENEFICIAIRE_UNIQUE == null) ? 0
									: this.NUM_BENEFICIAIRE_UNIQUE.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.NUM_BENEFICIAIRE_UNIQUE == null) {
							if (other.NUM_BENEFICIAIRE_UNIQUE != null)
								return false;
						} else if (!this.NUM_BENEFICIAIRE_UNIQUE.equals(other.NUM_BENEFICIAIRE_UNIQUE))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Adhesion_detail.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Adhesion_detail.csv", "US-ASCII", ";",
								"\n", false, 1, 0, limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row7 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row7 = new row7Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_4 = 0;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.NUM_ADHESION_NORMALISE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_ADHESION_NORMALISE", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.NUM_ADHESION_NORMALISE = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 1;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.NUM_BENEFICIAIRE_UNIQUE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_BENEFICIAIRE_UNIQUE", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.NUM_BENEFICIAIRE_UNIQUE = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 2;

							row7.DATE_NAISSANCE_ASSURE = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 3;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.CODE_POSTAL = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_POSTAL", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.CODE_POSTAL = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 4;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.EXERCICE_PAIEMENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"EXERCICE_PAIEMENT", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.EXERCICE_PAIEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 5;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.NUM_BENEFICIAIRE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NUM_BENEFICIAIRE", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.NUM_BENEFICIAIRE = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 6;

							row7.TYPE_BENEFICIAIRE = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 7;

							row7.DATE_NAISSANCE_BENEFICIAIRE = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 8;

							row7.CODE_PROFESSION = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 9;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.CODE_PRODUIT = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_PRODUIT", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.CODE_PRODUIT = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 10;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.CODE_FRACTIONNEMENT = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_FRACTIONNEMENT", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.CODE_FRACTIONNEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 11;

							row7.CODE_GARANTIE = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 12;

							row7.FORMULE = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 13;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.PRIMES_ACQUISES = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"PRIMES_ACQUISES", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.PRIMES_ACQUISES = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 14;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.CODE_AGENT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_AGENT", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.CODE_AGENT = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 15;

							temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
							if (temp.length() > 0) {

								try {

									row7.CODE_REGION = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_4) {
									globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",
											ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CODE_REGION", "row7", temp, ex_tFileInputDelimited_4),
											ex_tFileInputDelimited_4));
								}

							} else {

								row7.CODE_REGION = null;

							}

							columnIndexWithD_tFileInputDelimited_4 = 16;

							row7.PRIME_GARANTIE = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row7 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tAggregateRow_1_AGGOUT main ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row7"

								);
							}

							operation_finder_tAggregateRow_1.NUM_BENEFICIAIRE_UNIQUE = row7.NUM_BENEFICIAIRE_UNIQUE;

							operation_finder_tAggregateRow_1.hashCodeDirty = true;

							operation_result_tAggregateRow_1 = hash_tAggregateRow_1
									.get(operation_finder_tAggregateRow_1);

							boolean isFirstAdd_tAggregateRow_1 = false;

							if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

								operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

								operation_result_tAggregateRow_1.NUM_BENEFICIAIRE_UNIQUE = operation_finder_tAggregateRow_1.NUM_BENEFICIAIRE_UNIQUE;

								isFirstAdd_tAggregateRow_1 = true;

								hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
										operation_result_tAggregateRow_1);

							} // G_OutMain_AggR_001

							if (operation_result_tAggregateRow_1.EXERCICE_PAIEMENT_min == null
									|| row7.EXERCICE_PAIEMENT < operation_result_tAggregateRow_1.EXERCICE_PAIEMENT_min

							) {
								operation_result_tAggregateRow_1.EXERCICE_PAIEMENT_min = row7.EXERCICE_PAIEMENT;
							}

							tos_count_tAggregateRow_1_AGGOUT++;

							/**
							 * [tAggregateRow_1_AGGOUT main ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
							 */

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] start
							 */

							currentVirtualComponent = "tAggregateRow_1";

							currentComponent = "tAggregateRow_1_AGGOUT";

							/**
							 * [tAggregateRow_1_AGGOUT process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/Users/abdou/Desktop/M2 MIAGE BI/SID/data/raw/Adhesion_detail.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tAggregateRow_1_AGGIN - inputs:(OnRowsEnd) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_1 - inputs:(row3,row2,row6,row8)
				// outputs:(sinistre,sortieTMap)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct>getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row8.NUM_BENEFICIAIRE_UNIQUE = aggregated_row_tAggregateRow_1.NUM_BENEFICIAIRE_UNIQUE;

					row8.EXERCICE_PAIEMENT = aggregated_row_tAggregateRow_1.EXERCICE_PAIEMENT_min;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row8 main ] start
					 */

					currentComponent = "tAdvancedHash_row8";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row8"

						);
					}

					row8Struct row8_HashRow = new row8Struct();

					row8_HashRow.NUM_BENEFICIAIRE_UNIQUE = row8.NUM_BENEFICIAIRE_UNIQUE;

					row8_HashRow.EXERCICE_PAIEMENT = row8.EXERCICE_PAIEMENT;

					tHash_Lookup_row8.put(row8_HashRow);

					tos_count_tAdvancedHash_row8++;

					/**
					 * [tAdvancedHash_row8 main ] stop
					 */

					/**
					 * [tAdvancedHash_row8 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row8";

					/**
					 * [tAdvancedHash_row8 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row8 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row8";

					/**
					 * [tAdvancedHash_row8 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final SinistreFact SinistreFactClass = new SinistreFact();

		int exitCode = SinistreFactClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = SinistreFact.class.getClassLoader()
					.getResourceAsStream("projet_tp_sid/sinistrefact_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = SinistreFact.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SinistreFact");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 335593 characters generated by Talend Open Studio for Data Integration on the
 * April 3, 2025 at 4:34:48 AM CEST
 ************************************************************************************************/